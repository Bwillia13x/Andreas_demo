{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"next.config.ts":{"content":"import type { NextConfig } from 'next'\n\nconst nextConfig: NextConfig = {\n  // Production hardening: enforce strict TypeScript and ESLint checking\n  eslint: {\n    ignoreDuringBuilds: false, // Fail build on ESLint errors\n  },\n  typescript: {\n    ignoreBuildErrors: false, // Fail build on TypeScript errors\n  },\n  \n  // Enable experimental features for production readiness\n  experimental: {\n    // Enable WebSocket support\n    serverComponentsExternalPackages: ['ws'],\n    // Improve build performance\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js'\n        }\n      }\n    }\n  },\n  \n  // Security headers\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'origin-when-cross-origin',\n          },\n        ],\n      },\n    ]\n  },\n  \n  // Environment variable validation\n  env: {\n    ADMIN_TOKEN: process.env.ADMIN_TOKEN,\n    OPENAI_API_KEY: process.env.OPENAI_API_KEY,\n    OPERATIONS_WS_PORT: process.env.OPERATIONS_WS_PORT || '8080',\n    SMOKE_MODE: process.env.SMOKE_MODE,\n  },\n  \n  // Build optimizations\n  compiler: {\n    removeConsole: process.env.NODE_ENV === 'production',\n  },\n  \n  // Output configuration\n  output: 'standalone',\n  \n  // Asset optimization\n  images: {\n    formats: ['image/webp', 'image/avif'],\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n\nexport default nextConfig\n","size_bytes":1660},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Andreas Vibe - Business Management Platform\n\n## Overview\n\nAndreas Vibe is a production-ready business management platform designed for service-based businesses, particularly salons and similar establishments. The application combines modern web technologies with AI-powered features to provide comprehensive scheduling, inventory management, staff coordination, and business analytics. Built with a hybrid Next.js/Vite architecture, the platform offers both server-side rendering for admin interfaces and client-side interactivity for operational workflows.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Hybrid Frontend Architecture\nThe application uses a unique dual-frontend approach combining Next.js and Vite:\n- **Next.js App Router**: Handles server-side rendered admin dashboard pages with TypeScript and React Server Components\n- **Vite Client**: Powers interactive client-side features with React and TypeScript\n- **Shared Component System**: shadcn/ui components with Tailwind CSS for consistent design\n- **WebSocket Integration**: Real-time features for live updates and notifications\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with structured logging and middleware for request handling\n- **Database Layer**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **Authentication**: Admin token-based authentication with smoke mode for testing\n- **WebSocket Server**: Real-time communication for live updates and operational features\n\n### Database Design\n- **PostgreSQL**: Primary database with connection pooling and migration support\n- **Drizzle Schema**: Type-safe schema definitions for users, customers, staff, services, appointments, and inventory\n- **Migration System**: Automated database migrations with version control\n- **Backup System**: Automated backup creation and management\n\n### State Management\n- **TanStack Query**: Client-side data fetching and caching for API interactions\n- **Context Providers**: WebSocket and theme management through React Context\n- **Form Handling**: React Hook Form with Zod validation for type-safe form processing\n\n### Build and Development\n- **TypeScript**: Strict type checking across the entire codebase\n- **ESLint**: Comprehensive linting with React and TypeScript rules\n- **Vite**: Fast development server and optimized production builds\n- **esbuild**: Server bundling for production deployment\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket constructor configuration\n- **Replit**: Development environment integration with runtime error overlay and cartographer\n\n### AI and Analytics\n- **OpenAI API**: GPT-5 integration for AI-powered scheduling optimization and business insights\n- **Custom AI Search**: Intelligent search functionality with context-aware results\n\n### Payment Processing\n- **Stripe**: Payment processing with React Stripe.js integration for subscription and transaction handling\n\n### UI and Design\n- **Radix UI**: Comprehensive component library for accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **Font Awesome**: Additional icon support for business-specific graphics\n\n### Development and Monitoring\n- **WebSocket (ws)**: Real-time communication infrastructure\n- **Structured Logging**: Custom logging system for operational monitoring\n- **Health Monitoring**: Built-in health checks and system status reporting","size_bytes":3571},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./client/src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":2788},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"app/layout.tsx":{"content":"import type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport '../client/src/index.css'\nimport { WebSocketProvider } from '@/components/WebSocketProvider'\nimport { ThemeProvider } from 'next-themes'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport const metadata: Metadata = {\n  title: 'Andreas Vibe - Business Management Platform',\n  description: 'Production-ready business management system with AI scheduling, inventory management, and operational analytics.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={inter.className}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"light\"\n          enableSystem={false}\n          disableTransitionOnChange\n        >\n          <WebSocketProvider>\n            {children}\n          </WebSocketProvider>\n        </ThemeProvider>\n      </body>\n    </html>\n  )\n}\n","size_bytes":979},"app/page.tsx":{"content":"import { redirect } from 'next/navigation'\n\nexport default function HomePage() {\n  // Redirect to admin dashboard as this is primarily an admin platform\n  redirect('/admin')\n}\n","size_bytes":176},"attached_assets/content-1757635358399.md":{"content":"# OSS Vibe Coding Platform\n\nThis is a **demo** of an end-to-end coding platform where the user can enter text prompts, and the agent will create a full stack application.\n\nIt uses Vercel's AI Cloud services like [Sandbox](https://vercel.com/docs/vercel-sandbox) for secure code execution, [AI Gateway](https://vercel.com/docs/ai-gateway) for GPT-5 and other models support, [Fluid Compute](https://vercel.com/fluid) for efficient rendering and streaming, and it's built with [Next.js](https://nextjs.org/) and the [AI SDK](https://ai-sdk.dev/docs/introduction).\n\nTry the demo or [deploy your own](https://vercel.com/new/clone?demo-description=A+full-stack+coding+platform+built+with+Vercel%27s+AI+Cloud%2C+AI+SDK%2C+and+Next.js.&demo-image=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1754588832%2FOSSvibecodingplatform%2Fscreenshot.png&demo-title=Vibe+Coding+Platform&demo-url=https%3A%2F%2Fvercel.fyi%2Fvibes&project-name=Vibe+Coding+Platform&repository-name=vibe-coding-platform&repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fexamples%2Ftree%2Fmain%2Fapps%2Fvibe-coding-platform&from=vibe-coding-platform-app).\n\n- Chat\n- Preview\n- File Explorer\n- Logs\n\nChat\n\n\\[ready\\]\n\nClick and try one of these prompts:\n\n- Generate a Next.js app that allows to list and search Pokemons\n- Create a \\`golang\\` server that responds with \"Hello World\" to any request\n\nGPT-5Gemini 2.5 FlashGPT-5Grok 3 Fast BetaKimi K2Nova Pro\n\nSandbox Remote Filesystem\n\nSandbox Remote Output\n\nChat\n\n\\[ready\\]\n\nClick and try one of these prompts:\n\n- Generate a Next.js app that allows to list and search Pokemons\n- Create a \\`golang\\` server that responds with \"Hello World\" to any request\n\nGPT-5Gemini 2.5 FlashGPT-5Grok 3 Fast BetaKimi K2Nova Pro\n\nSandbox Remote Filesystem\n\nSandbox Remote Output\n\nOSS Vibe Coding Platform","size_bytes":1803},"components/AdminSidebar.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\nimport { cn } from '@/lib/utils'\n\ninterface NavItem {\n  href: string\n  icon: string\n  label: string\n  badge?: string\n}\n\nconst navigationItems: NavItem[] = [\n  { href: '/admin', icon: 'fas fa-tachometer-alt', label: 'Dashboard' },\n  { href: '/admin/scheduling', icon: 'fas fa-calendar-check', label: 'Scheduling', badge: 'Live' },\n  { href: '/admin/inventory', icon: 'fas fa-boxes', label: 'Inventory' },\n  { href: '/admin/staff', icon: 'fas fa-users', label: 'Staff Management' },\n]\n\nconst analyticsItems: NavItem[] = [\n  { href: '/admin/analytics', icon: 'fas fa-chart-bar', label: 'Performance' },\n  { href: '/admin/ai-insights', icon: 'fas fa-robot', label: 'AI Insights' },\n  { href: '/admin/email-automation', icon: 'fas fa-envelope', label: 'Email Automation' },\n]\n\nconst systemItems: NavItem[] = [\n  { href: '/admin/database', icon: 'fas fa-database', label: 'Database' },\n  { href: '/admin/settings', icon: 'fas fa-cogs', label: 'Settings' },\n]\n\nexport function AdminSidebar() {\n  const [isHidden, setIsHidden] = useState(false)\n  const pathname = usePathname()\n\n  const NavSection = ({ title, items }: { title: string; items: NavItem[] }) => (\n    <div className=\"space-y-2\">\n      <div className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-4\">\n        {title}\n      </div>\n      {items.map((item) => (\n        <Link\n          key={item.href}\n          href={item.href}\n          className={cn(\n            \"flex items-center gap-3 px-3 py-2.5 text-sm rounded-lg transition-colors\",\n            pathname === item.href\n              ? \"bg-primary text-primary-foreground\"\n              : \"text-foreground hover:bg-muted\"\n          )}\n        >\n          <i className={item.icon}></i>\n          <span>{item.label}</span>\n          {item.badge && (\n            <span className=\"ml-auto bg-accent text-accent-foreground text-xs px-2 py-1 rounded-full\">\n              {item.badge}\n            </span>\n          )}\n        </Link>\n      ))}\n    </div>\n  )\n\n  return (\n    <>\n      {/* Mobile Overlay */}\n      <div \n        className={cn(\n          \"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\",\n          isHidden ? \"block\" : \"hidden\"\n        )}\n        onClick={() => setIsHidden(false)}\n      />\n      \n      {/* Sidebar */}\n      <div \n        className={cn(\n          \"sidebar-transition fixed lg:static inset-y-0 left-0 z-50 w-72 bg-card border-r border-border transform lg:transform-none\",\n          isHidden ? \"sidebar-hidden\" : \"\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Logo & Brand */}\n          <div className=\"flex items-center gap-3 p-6 border-b border-border\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-chart-line text-primary-foreground\"></i>\n            </div>\n            <div>\n              <h1 className=\"font-bold text-lg text-foreground\">Andreas Vibe</h1>\n              <p className=\"text-sm text-muted-foreground\">Business Platform</p>\n            </div>\n            {/* WebSocket Status Indicator */}\n            <div className=\"websocket-indicator ml-auto\">\n              <div className=\"w-3 h-3 bg-accent rounded-full animate-pulse\" title=\"WebSocket Connected\"></div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-8\">\n            <NavSection title=\"Operations\" items={navigationItems} />\n            <NavSection title=\"Analytics\" items={analyticsItems} />\n            <NavSection title=\"System\" items={systemItems} />\n          </nav>\n\n          {/* User Profile */}\n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-user text-secondary-foreground text-sm\"></i>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-foreground\">Admin User</p>\n                <p className=\"text-xs text-muted-foreground\">System Administrator</p>\n              </div>\n              <button className=\"text-muted-foreground hover:text-foreground\">\n                <i className=\"fas fa-sign-out-alt\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","size_bytes":4532},"components/MetricsOverview.tsx":{"content":"'use client'\n\ninterface SystemStatus {\n  buildStatus: string\n  database: { status: string; connections: string; lastMigration: string }\n  websocket: { status: string; port: number }\n  memory: { usage: number }\n  cpu: { usage: number }\n  api: { responseTime: number }\n}\n\ninterface MetricsOverviewProps {\n  systemStatus: SystemStatus | null\n  wsConnected: boolean\n}\n\nexport function MetricsOverview({ systemStatus, wsConnected }: MetricsOverviewProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <div className=\"metric-card bg-card rounded-xl border border-border p-6 shadow-sm hover:shadow-md transition-all\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Build Status</p>\n            <p className=\"text-2xl font-bold text-foreground mt-1\">\n              {systemStatus?.buildStatus || 'Loading...'}\n            </p>\n          </div>\n          <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-check-circle text-accent text-xl\"></i>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2 mt-4\">\n          <span className=\"text-xs bg-accent/20 text-accent px-2 py-1 rounded-full\">✅ 45 Pages Compiled</span>\n        </div>\n      </div>\n\n      <div className=\"metric-card bg-card rounded-xl border border-border p-6 shadow-sm hover:shadow-md transition-all\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Database</p>\n            <p className=\"text-2xl font-bold text-foreground mt-1\">\n              {systemStatus?.database.status || 'Loading...'}\n            </p>\n          </div>\n          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-database text-primary text-xl\"></i>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2 mt-4\">\n          <span className=\"text-xs bg-primary/20 text-primary px-2 py-1 rounded-full\">PostgreSQL Active</span>\n        </div>\n      </div>\n\n      <div className=\"metric-card bg-card rounded-xl border border-border p-6 shadow-sm hover:shadow-md transition-all\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">TypeScript</p>\n            <p className=\"text-2xl font-bold text-foreground mt-1\">0 Errors</p>\n          </div>\n          <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n            <i className=\"fab fa-js-square text-accent text-xl\"></i>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2 mt-4\">\n          <span className=\"text-xs bg-accent/20 text-accent px-2 py-1 rounded-full\">Strict Mode ✅</span>\n        </div>\n      </div>\n\n      <div className=\"metric-card bg-card rounded-xl border border-border p-6 shadow-sm hover:shadow-md transition-all\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">WebSocket</p>\n            <p className=\"text-2xl font-bold text-foreground mt-1\">\n              {wsConnected ? 'Active' : 'Inactive'}\n            </p>\n          </div>\n          <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-plug text-secondary text-xl\"></i>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2 mt-4\">\n          <span className=\"text-xs bg-secondary/20 text-secondary px-2 py-1 rounded-full\">\n            Port {systemStatus?.websocket.port || '8080'}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3827},"components/OperationsGrid.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface Appointment {\n  id: string\n  customerName: string\n  service: string\n  time: string\n  status: 'confirmed' | 'in-progress'\n}\n\ninterface InventoryItem {\n  id: string\n  name: string\n  sku: string\n  supplier: string\n  stock: number\n  status: 'in-stock' | 'low-stock'\n}\n\nexport function OperationsGrid() {\n  const [appointments] = useState<Appointment[]>([\n    {\n      id: '1',\n      customerName: 'Sarah Johnson',\n      service: 'Hair Color & Cut - 2hrs',\n      time: '2:00 PM',\n      status: 'confirmed'\n    },\n    {\n      id: '2',\n      customerName: 'Mike Chen',\n      service: 'Beard Trim - 30min',\n      time: '4:30 PM',\n      status: 'in-progress'\n    }\n  ])\n\n  const [inventory] = useState<InventoryItem[]>([\n    {\n      id: '1',\n      name: 'Professional Hair Color',\n      sku: 'RS-HC001',\n      supplier: 'Andreas Co. Supplier',\n      stock: 23,\n      status: 'in-stock'\n    },\n    {\n      id: '2',\n      name: 'Styling Tools',\n      sku: 'RS-ST002',\n      supplier: 'RS Supplier',\n      stock: 5,\n      status: 'low-stock'\n    }\n  ])\n\n  const handleSendPurchaseOrder = async () => {\n    // Mock API call\n    alert('Purchase order email sent successfully!')\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Real-time Scheduling */}\n      <div className=\"lg:col-span-2 bg-card rounded-xl border border-border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground\">AI-Powered Scheduling</h3>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-accent\">Live Updates</span>\n            <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {appointments.map((appointment) => (\n            <div key={appointment.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg border border-border\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-user text-primary\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-foreground\">{appointment.customerName}</p>\n                  <p className=\"text-sm text-muted-foreground\">{appointment.service}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-foreground\">{appointment.time}</p>\n                <span className={`text-xs px-2 py-1 rounded-full ${\n                  appointment.status === 'confirmed' \n                    ? 'bg-accent/20 text-accent' \n                    : 'bg-primary/20 text-primary'\n                }`}>\n                  {appointment.status === 'confirmed' ? 'Confirmed' : 'In Progress'}\n                </span>\n              </div>\n            </div>\n          ))}\n          \n          {/* AI Conflict Detection */}\n          <div className=\"p-4 bg-accent/5 border-l-4 border-accent rounded-r-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <i className=\"fas fa-robot text-accent\"></i>\n              <span className=\"font-medium text-accent\">AI Scheduling Assistant</span>\n            </div>\n            <p className=\"text-sm text-foreground\">Suggested optimization: Move 5:00 PM appointment to 5:15 PM to reduce staff overlap by 15 minutes.</p>\n            <div className=\"flex gap-2 mt-3\">\n              <button className=\"px-3 py-1 bg-accent text-accent-foreground rounded-md text-xs font-medium\">Apply</button>\n              <button className=\"px-3 py-1 bg-muted text-muted-foreground rounded-md text-xs font-medium\">Dismiss</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* System Operations */}\n      <div className=\"space-y-6\">\n        {/* Database Operations */}\n        <div className=\"bg-card rounded-xl border border-border p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Database Operations</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Last Migration</span>\n              <span className=\"text-sm text-foreground\">2 hours ago</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Backup Status</span>\n              <span className=\"text-sm text-accent\">✅ Current</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">Connection Pool</span>\n              <span className=\"text-sm text-foreground\">8/20 active</span>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2 mt-4\">\n              <button className=\"px-3 py-2 bg-primary text-primary-foreground rounded-md text-sm font-medium hover:bg-primary/90 transition-colors\">\n                <i className=\"fas fa-database mr-1\"></i>Migrate\n              </button>\n              <button className=\"px-3 py-2 bg-secondary text-secondary-foreground rounded-md text-sm font-medium hover:bg-secondary/90 transition-colors\">\n                <i className=\"fas fa-save mr-1\"></i>Backup\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* System Health */}\n        <div className=\"bg-card rounded-xl border border-border p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">System Health</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">Memory Usage</span>\n                <span className=\"text-sm text-foreground\">68%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-primary h-2 rounded-full\" style={{width: '68%'}}></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">CPU Usage</span>\n                <span className=\"text-sm text-foreground\">34%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-accent h-2 rounded-full\" style={{width: '34%'}}></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">API Response</span>\n                <span className=\"text-sm text-accent\">245ms avg</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div className=\"bg-accent h-2 rounded-full\" style={{width: '85%'}}></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":7323},"components/SystemChecks.tsx":{"content":"'use client'\n\nexport function SystemChecks() {\n  const handleRunCommand = async (command: string) => {\n    // Mock command execution - in production this would call an API\n    console.log(`Running: pnpm ${command}`)\n    alert(`Running: pnpm ${command}`)\n  }\n\n  const checkItems = [\n    { category: 'Core Systems', items: [\n      { name: 'TypeScript Zero Errors', status: true },\n      { name: 'ESLint Compliance', status: true },\n      { name: 'Build Success (45 pages)', status: true },\n      { name: 'Test Suite Passing', status: true }\n    ]},\n    { category: 'Database & Security', items: [\n      { name: 'PostgreSQL Connected', status: true },\n      { name: 'Migrations Applied', status: true },\n      { name: 'Admin Token Security', status: true },\n      { name: 'Backup Schedule Active', status: true }\n    ]},\n    { category: 'Operations', items: [\n      { name: 'WebSocket Configured', status: true },\n      { name: 'Smoke Tests Passing', status: true },\n      { name: 'Health Endpoint Active', status: true },\n      { name: 'Structured Logging', status: true }\n    ]}\n  ]\n\n  const commands = [\n    { name: 'pnpm check', icon: 'fas fa-play', variant: 'primary' },\n    { name: 'pnpm build', icon: 'fas fa-hammer', variant: 'secondary' },\n    { name: 'pnpm test', icon: 'fas fa-flask', variant: 'accent' },\n    { name: 'pnpm smoke', icon: 'fas fa-smoke', variant: 'muted' }\n  ]\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Production Readiness Checklist</h3>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-accent font-medium\">All Systems Operational</span>\n          <i className=\"fas fa-check-circle text-accent\"></i>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {checkItems.map((section) => (\n          <div key={section.category} className=\"space-y-3\">\n            <h4 className=\"font-medium text-foreground\">{section.category}</h4>\n            <div className=\"space-y-2\">\n              {section.items.map((item) => (\n                <div key={item.name} className=\"flex items-center gap-3\">\n                  <i className={`fas fa-check-circle ${item.status ? 'text-accent' : 'text-muted-foreground'}`}></i>\n                  <span className=\"text-sm text-foreground\">{item.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Command Center */}\n      <div className=\"mt-6 p-4 bg-muted/30 rounded-lg\">\n        <h4 className=\"font-medium text-foreground mb-3\">Quick Commands</h4>\n        <div className=\"flex flex-wrap gap-3\">\n          {commands.map((cmd) => (\n            <button\n              key={cmd.name}\n              onClick={() => handleRunCommand(cmd.name.replace('pnpm ', ''))}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                cmd.variant === 'primary' \n                  ? 'bg-primary text-primary-foreground hover:bg-primary/90'\n                  : cmd.variant === 'secondary'\n                  ? 'bg-secondary text-secondary-foreground hover:bg-secondary/90'\n                  : cmd.variant === 'accent'\n                  ? 'bg-accent text-accent-foreground hover:bg-accent/90'\n                  : 'bg-muted text-muted-foreground hover:bg-muted/80'\n              }`}\n            >\n              <i className={`${cmd.icon} mr-2`}></i>{cmd.name}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":3653},"components/WebSocketProvider.tsx":{"content":"'use client'\n\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react'\n\ninterface WebSocketContextType {\n  connected: boolean\n  lastMessage: string | null\n  sendMessage: (message: string) => void\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined)\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext)\n  if (!context) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider')\n  }\n  return context\n}\n\ninterface WebSocketProviderProps {\n  children: ReactNode\n}\n\nexport function WebSocketProvider({ children }: WebSocketProviderProps) {\n  const [connected, setConnected] = useState(false)\n  const [lastMessage, setLastMessage] = useState<string | null>(null)\n  const [socket, setSocket] = useState<WebSocket | null>(null)\n\n  useEffect(() => {\n    // Don't auto-connect WebSocket during build or in smoke mode\n    if (typeof window === 'undefined' || process.env.NODE_ENV === 'production') {\n      return\n    }\n\n    const connectWebSocket = () => {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\"\n        const wsUrl = `${protocol}//${window.location.host}/ws`\n        const ws = new WebSocket(wsUrl)\n\n        ws.onopen = () => {\n          setConnected(true)\n          console.log('WebSocket connected')\n        }\n\n        ws.onmessage = (event) => {\n          setLastMessage(event.data)\n        }\n\n        ws.onclose = () => {\n          setConnected(false)\n          console.log('WebSocket disconnected')\n        }\n\n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error)\n          setConnected(false)\n        }\n\n        setSocket(ws)\n      } catch (error) {\n        console.error('Failed to connect WebSocket:', error)\n      }\n    }\n\n    // Only attempt connection if not in build mode\n    if (process.env.NODE_ENV === 'development') {\n      connectWebSocket()\n    }\n\n    return () => {\n      if (socket) {\n        socket.close()\n      }\n    }\n  }, [])\n\n  const sendMessage = (message: string) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message)\n    } else {\n      console.warn('WebSocket not connected')\n    }\n  }\n\n  return (\n    <WebSocketContext.Provider value={{ connected, lastMessage, sendMessage }}>\n      {children}\n    </WebSocketContext.Provider>\n  )\n}\n","size_bytes":2379},"lib/auth.ts":{"content":"import { log } from './log'\n\nexport interface AdminUser {\n  id: string\n  username: string\n  role: 'admin'\n}\n\nexport function validateAdminToken(token?: string): boolean {\n  const adminToken = process.env.ADMIN_TOKEN\n  const smokeMode = process.env.SMOKE_MODE === '1'\n  \n  // Allow access in smoke mode for testing\n  if (smokeMode) {\n    log('Admin access granted via smoke mode', { smokeMode: true })\n    return true\n  }\n  \n  if (!adminToken) {\n    log('Admin access denied: ADMIN_TOKEN not configured', { configured: false })\n    return false\n  }\n  \n  if (!token) {\n    log('Admin access denied: No token provided', { tokenProvided: false })\n    return false\n  }\n  \n  const isValid = token === adminToken\n  \n  log('Admin token validation', { \n    valid: isValid,\n    timestamp: new Date().toISOString()\n  })\n  \n  return isValid\n}\n\nexport function getCurrentUser(): AdminUser | null {\n  // In a real implementation, this would check session/JWT\n  // For now, we'll return a mock admin user if token is valid\n  const smokeMode = process.env.SMOKE_MODE === '1'\n  const adminToken = process.env.ADMIN_TOKEN\n  \n  if (smokeMode || adminToken) {\n    return {\n      id: 'admin-1',\n      username: 'admin',\n      role: 'admin'\n    }\n  }\n  \n  return null\n}\n\nexport function requireAdmin(): AdminUser {\n  const user = getCurrentUser()\n  \n  if (!user) {\n    throw new Error('Admin access required')\n  }\n  \n  return user\n}\n","size_bytes":1411},"lib/log.ts":{"content":"interface LogContext {\n  [key: string]: unknown\n}\n\ninterface LogEntry {\n  timestamp: string\n  level: 'info' | 'warn' | 'error'\n  message: string\n  context?: LogContext\n}\n\nexport function log(message: string, context?: LogContext): void {\n  const entry: LogEntry = {\n    timestamp: new Date().toISOString(),\n    level: 'info',\n    message,\n    context\n  }\n  \n  // In development, also log to console\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[${entry.timestamp}] ${entry.message}`, context ? context : '')\n  }\n  \n  // In production, you might want to send to a logging service\n  // For now, we'll just use console.log with structured format\n  console.log(JSON.stringify(entry))\n}\n\nexport function logError(message: string, error: Error, context?: LogContext): void {\n  const entry: LogEntry = {\n    timestamp: new Date().toISOString(),\n    level: 'error',\n    message,\n    context: {\n      ...context,\n      error: error.message,\n      stack: error.stack\n    }\n  }\n  \n  console.error(JSON.stringify(entry))\n}\n\nexport function logWarn(message: string, context?: LogContext): void {\n  const entry: LogEntry = {\n    timestamp: new Date().toISOString(),\n    level: 'warn',\n    message,\n    context\n  }\n  \n  console.warn(JSON.stringify(entry))\n}\n","size_bytes":1263},"lib/types.ts":{"content":"// Core system types\nexport interface SystemHealth {\n  status: 'healthy' | 'unhealthy'\n  timestamp: string\n  services: {\n    database: boolean\n    websocket: boolean\n    openai: boolean\n  }\n  metrics: {\n    memory: number\n    cpu: number\n    responseTime: number\n  }\n}\n\nexport interface ApiResponse<T = unknown> {\n  success: boolean\n  data?: T\n  error?: string\n  timestamp: string\n}\n\n// Business domain types\nexport interface Appointment {\n  id: string\n  customerId: string\n  customerName: string\n  staffId: string\n  serviceId: string\n  serviceName: string\n  duration: number // in minutes\n  scheduledStart: Date\n  scheduledEnd: Date\n  status: 'scheduled' | 'confirmed' | 'in-progress' | 'completed' | 'cancelled' | 'no-show'\n  notes?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface Customer {\n  id: string\n  name: string\n  email: string\n  phone: string\n  preferences?: Record<string, unknown>\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface Staff {\n  id: string\n  name: string\n  email: string\n  role: string\n  skills: string[]\n  availability: WeeklySchedule\n  isActive: boolean\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface Service {\n  id: string\n  name: string\n  description: string\n  duration: number // in minutes\n  price: number\n  category: string\n  isActive: boolean\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface InventoryItem {\n  id: string\n  name: string\n  sku: string\n  category: string\n  supplier: string\n  currentStock: number\n  minStock: number\n  maxStock: number\n  unitCost: number\n  status: 'in-stock' | 'low-stock' | 'out-of-stock'\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Schedule and availability types\nexport interface TimeSlot {\n  start: string // HH:MM format\n  end: string   // HH:MM format\n}\n\nexport interface DaySchedule {\n  isAvailable: boolean\n  slots: TimeSlot[]\n}\n\nexport interface WeeklySchedule {\n  monday: DaySchedule\n  tuesday: DaySchedule\n  wednesday: DaySchedule\n  thursday: DaySchedule\n  friday: DaySchedule\n  saturday: DaySchedule\n  sunday: DaySchedule\n}\n\n// AI and analytics types\nexport interface AIInsight {\n  id: string\n  type: 'optimization' | 'prediction' | 'recommendation'\n  category: 'scheduling' | 'inventory' | 'staff' | 'customer'\n  title: string\n  description: string\n  confidence: number // 0-1\n  actionable: boolean\n  createdAt: Date\n  appliedAt?: Date\n}\n\nexport interface BusinessMetrics {\n  revenue: {\n    total: number\n    change: number\n    period: string\n  }\n  appointments: {\n    total: number\n    completed: number\n    cancelled: number\n    change: number\n  }\n  customers: {\n    total: number\n    new: number\n    returning: number\n  }\n  staff: {\n    utilization: number\n    performance: Record<string, number>\n  }\n}\n\n// WebSocket message types\nexport interface WSMessage {\n  type: string\n  payload?: Record<string, unknown>\n  timestamp: string\n}\n\nexport interface WSAppointmentUpdate extends WSMessage {\n  type: 'appointment-update'\n  payload: {\n    appointmentId: string\n    status: Appointment['status']\n    changes: Partial<Appointment>\n  }\n}\n\nexport interface WSSystemUpdate extends WSMessage {\n  type: 'system-update'\n  payload: {\n    component: string\n    status: string\n    details?: Record<string, unknown>\n  }\n}\n\n// Email and communication types\nexport interface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  htmlContent: string\n  textContent: string\n  variables: string[]\n}\n\nexport interface PurchaseOrder {\n  id: string\n  vendorEmail: string\n  items: Array<{\n    sku: string\n    name: string\n    quantity: number\n    unitPrice: number\n  }>\n  totalAmount: number\n  status: 'draft' | 'sent' | 'acknowledged' | 'fulfilled'\n  createdAt: Date\n  sentAt?: Date\n}\n\n// Environment and configuration types\nexport interface AppConfig {\n  businessName: string\n  operationsPort: number\n  emailFrom: string\n  backupSchedule: 'hourly' | 'daily' | 'weekly' | 'disabled'\n  features: {\n    aiInsights: boolean\n    emailAutomation: boolean\n    inventoryManagement: boolean\n    staffPerformance: boolean\n  }\n}\n","size_bytes":4021},"lib/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws'\nimport { createServer } from 'http'\nimport { log } from './log'\n\ninterface WebSocketStatus {\n  running: boolean\n  port: number\n  connections: number\n  uptime: number\n}\n\nlet wsServer: WebSocketServer | null = null\nlet httpServer: ReturnType<typeof createServer> | null = null\nlet startTime: Date | null = null\n\nexport async function startWebSocketServer(): Promise<void> {\n  if (wsServer) {\n    log('WebSocket server already running', { port: getPort() })\n    return\n  }\n  \n  const port = getPort()\n  \n  try {\n    // Create HTTP server for WebSocket\n    httpServer = createServer()\n    \n    // Create WebSocket server\n    wsServer = new WebSocketServer({ \n      server: httpServer,\n      path: '/ws'\n    })\n    \n    wsServer.on('connection', (ws: WebSocket) => {\n      log('WebSocket client connected', { connections: wsServer?.clients.size || 0 })\n      \n      ws.on('message', (data) => {\n        log('WebSocket message received', { message: data.toString() })\n        \n        // Echo message to all clients\n        wsServer?.clients.forEach((client) => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(`Echo: ${data.toString()}`)\n          }\n        })\n      })\n      \n      ws.on('close', () => {\n        log('WebSocket client disconnected', { connections: wsServer?.clients.size || 0 })\n      })\n      \n      // Send welcome message\n      ws.send(JSON.stringify({\n        type: 'welcome',\n        message: 'Connected to Andreas Vibe WebSocket',\n        timestamp: new Date().toISOString()\n      }))\n    })\n    \n    // Start HTTP server\n    await new Promise<void>((resolve, reject) => {\n      httpServer!.listen(port, '0.0.0.0', (error?: Error) => {\n        if (error) {\n          reject(error)\n          return\n        }\n        \n        startTime = new Date()\n        log('WebSocket server started', { port, timestamp: startTime.toISOString() })\n        resolve()\n      })\n    })\n    \n  } catch (error) {\n    log('Failed to start WebSocket server', { \n      error: error instanceof Error ? error.message : 'Unknown error',\n      port \n    })\n    throw error\n  }\n}\n\nexport function stopWebSocketServer(): void {\n  if (wsServer) {\n    wsServer.close()\n    wsServer = null\n  }\n  \n  if (httpServer) {\n    httpServer.close()\n    httpServer = null\n  }\n  \n  startTime = null\n  log('WebSocket server stopped')\n}\n\nexport function getWebSocketStatus(): WebSocketStatus {\n  return {\n    running: wsServer !== null,\n    port: getPort(),\n    connections: wsServer?.clients.size || 0,\n    uptime: startTime ? Date.now() - startTime.getTime() : 0\n  }\n}\n\nfunction getPort(): number {\n  return parseInt(process.env.OPERATIONS_WS_PORT || '8080', 10)\n}\n\n// Broadcast message to all connected clients\nexport function broadcastMessage(message: string | object): void {\n  if (!wsServer) {\n    log('Cannot broadcast: WebSocket server not running')\n    return\n  }\n  \n  const data = typeof message === 'string' ? message : JSON.stringify(message)\n  \n  wsServer.clients.forEach((client) => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(data)\n    }\n  })\n  \n  log('Message broadcast to WebSocket clients', { \n    message: typeof message,\n    clients: wsServer.clients.size \n  })\n}\n","size_bytes":3261},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Initialize demo data before starting the server\n  try {\n    // Import storage here to avoid circular dependencies\n    const { storage } = await import(\"./storage\");\n    await storage.seedDemoData();\n    log('Demo data initialized successfully');\n  } catch (error) {\n    log(`Error initializing demo data: ${error}`);\n    // Continue server startup even if seeding fails\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2446},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport chatRouter from \"./routes/chat\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n  \n  // Add chat route for AI business assistant\n  app.use(\"/api\", chatRouter);\n\n  // Business Profile endpoints\n  app.get(\"/api/profile\", async (req, res) => {\n    try {\n      const profile = await storage.getBusinessProfile();\n      if (!profile) {\n        return res.status(404).json({ message: \"Business profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error getting business profile:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Services endpoints\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error getting services:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/services/:id\", async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error getting service:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Staff endpoints\n  app.get(\"/api/staff\", async (req, res) => {\n    try {\n      const staff = await storage.getAllStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error getting staff:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const staffMember = await storage.getStaff(req.params.id);\n      if (!staffMember) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staffMember);\n    } catch (error) {\n      console.error(\"Error getting staff member:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Customer endpoints (limited for privacy)\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const customers = await storage.getAllCustomers();\n      // Return limited customer data for privacy\n      const publicCustomers = customers.map(customer => ({\n        id: customer.id,\n        name: customer.name,\n        phone: customer.phone,\n        preferences: customer.preferences,\n        createdAt: customer.createdAt,\n        updatedAt: customer.updatedAt\n      }));\n      res.json(publicCustomers);\n    } catch (error) {\n      console.error(\"Error getting customers:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Appointments endpoints\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      let appointments;\n      \n      // Check for day filter\n      if (req.query.day === 'today') {\n        appointments = await storage.getAppointmentsByDay(new Date());\n      } else if (req.query.date) {\n        const filterDate = new Date(req.query.date as string);\n        if (isNaN(filterDate.getTime())) {\n          return res.status(400).json({ message: \"Invalid date format\" });\n        }\n        appointments = await storage.getAppointmentsByDay(filterDate);\n      } else {\n        appointments = await storage.getAllAppointments();\n      }\n      \n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error getting appointments:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const appointment = await storage.getAppointment(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error getting appointment:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Inventory endpoints\n  app.get(\"/api/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getAllInventoryItems();\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Error getting inventory:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/inventory/:id\", async (req, res) => {\n    try {\n      const item = await storage.getInventoryItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error getting inventory item:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Analytics endpoints\n  app.get(\"/api/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getAllAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error getting analytics:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/:id\", async (req, res) => {\n    try {\n      const analyticsData = await storage.getAnalytics(req.params.id);\n      if (!analyticsData) {\n        return res.status(404).json({ message: \"Analytics data not found\" });\n      }\n      res.json(analyticsData);\n    } catch (error) {\n      console.error(\"Error getting analytics data:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":5818},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type BusinessProfile,\n  type InsertBusinessProfile,\n  type Service,\n  type InsertService,\n  type Staff,\n  type InsertStaff,\n  type Customer,\n  type InsertCustomer,\n  type Appointment,\n  type InsertAppointment,\n  type InventoryItem,\n  type InsertInventoryItem,\n  type AnalyticsSnapshot,\n  type InsertAnalyticsSnapshot\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Business Profile methods (singleton)\n  getBusinessProfile(): Promise<BusinessProfile | undefined>;\n  setBusinessProfile(profile: InsertBusinessProfile): Promise<BusinessProfile>;\n  \n  // Services methods\n  getAllServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n  \n  // Staff methods\n  getAllStaff(): Promise<Staff[]>;\n  getStaff(id: string): Promise<Staff | undefined>;\n  createStaff(staff: InsertStaff): Promise<Staff>;\n  updateStaff(id: string, staff: Partial<InsertStaff>): Promise<Staff | undefined>;\n  deleteStaff(id: string): Promise<boolean>;\n  \n  // Customer methods\n  getAllCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n  deleteCustomer(id: string): Promise<boolean>;\n  \n  // Appointment methods\n  getAllAppointments(): Promise<Appointment[]>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointmentsByDay(date: Date): Promise<Appointment[]>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  deleteAppointment(id: string): Promise<boolean>;\n  \n  // Inventory methods\n  getAllInventoryItems(): Promise<InventoryItem[]>;\n  getInventoryItem(id: string): Promise<InventoryItem | undefined>;\n  createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem>;\n  updateInventoryItem(id: string, item: Partial<InsertInventoryItem>): Promise<InventoryItem | undefined>;\n  deleteInventoryItem(id: string): Promise<boolean>;\n  \n  // Analytics methods\n  getAllAnalytics(): Promise<AnalyticsSnapshot[]>;\n  getAnalytics(id: string): Promise<AnalyticsSnapshot | undefined>;\n  createAnalytics(analytics: InsertAnalyticsSnapshot): Promise<AnalyticsSnapshot>;\n  \n  // Seed method\n  seedDemoData(): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private businessProfile: BusinessProfile | undefined;\n  private services: Map<string, Service>;\n  private staff: Map<string, Staff>;\n  private customers: Map<string, Customer>;\n  private appointments: Map<string, Appointment>;\n  private inventoryItems: Map<string, InventoryItem>;\n  private analytics: Map<string, AnalyticsSnapshot>;\n\n  constructor() {\n    this.users = new Map();\n    this.services = new Map();\n    this.staff = new Map();\n    this.customers = new Map();\n    this.appointments = new Map();\n    this.inventoryItems = new Map();\n    this.analytics = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || 'admin',\n      createdAt: now,\n      updatedAt: now\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Business Profile methods\n  async getBusinessProfile(): Promise<BusinessProfile | undefined> {\n    return this.businessProfile;\n  }\n\n  async setBusinessProfile(profile: InsertBusinessProfile): Promise<BusinessProfile> {\n    const id = randomUUID();\n    const now = new Date();\n    const businessProfile: BusinessProfile = {\n      name: profile.name,\n      description: profile.description ?? null,\n      address: profile.address,\n      phone: profile.phone,\n      email: profile.email,\n      website: profile.website ?? null,\n      hours: profile.hours as any,\n      socialLinks: profile.socialLinks as any,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.businessProfile = businessProfile;\n    return businessProfile;\n  }\n\n  // Service methods\n  async getAllServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const now = new Date();\n    const newService: Service = {\n      name: service.name,\n      description: service.description,\n      duration: service.duration,\n      price: service.price,\n      category: service.category,\n      isActive: service.isActive ?? true,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.services.set(id, newService);\n    return newService;\n  }\n\n  async updateService(id: string, service: Partial<InsertService>): Promise<Service | undefined> {\n    const existing = this.services.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Service = {\n      ...existing,\n      ...service,\n      updatedAt: new Date()\n    };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  // Staff methods\n  async getAllStaff(): Promise<Staff[]> {\n    return Array.from(this.staff.values());\n  }\n\n  async getStaff(id: string): Promise<Staff | undefined> {\n    return this.staff.get(id);\n  }\n\n  async createStaff(staff: InsertStaff): Promise<Staff> {\n    const id = randomUUID();\n    const now = new Date();\n    const newStaff: Staff = {\n      name: staff.name,\n      email: staff.email,\n      role: staff.role,\n      specialties: staff.specialties ?? [],\n      experience: staff.experience,\n      rating: staff.rating ?? '4.5',\n      bio: staff.bio ?? null,\n      avatar: staff.avatar ?? null,\n      availability: staff.availability as any,\n      isActive: staff.isActive ?? true,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.staff.set(id, newStaff);\n    return newStaff;\n  }\n\n  async updateStaff(id: string, staff: Partial<InsertStaff>): Promise<Staff | undefined> {\n    const existing = this.staff.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Staff = {\n      ...existing,\n      ...staff,\n      updatedAt: new Date()\n    };\n    this.staff.set(id, updated);\n    return updated;\n  }\n\n  async deleteStaff(id: string): Promise<boolean> {\n    return this.staff.delete(id);\n  }\n\n  // Customer methods\n  async getAllCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const now = new Date();\n    const newCustomer: Customer = {\n      name: customer.name,\n      email: customer.email,\n      phone: customer.phone,\n      preferences: customer.preferences as any,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.customers.set(id, newCustomer);\n    return newCustomer;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const existing = this.customers.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Customer = {\n      ...existing,\n      ...customer,\n      updatedAt: new Date()\n    };\n    this.customers.set(id, updated);\n    return updated;\n  }\n\n  async deleteCustomer(id: string): Promise<boolean> {\n    return this.customers.delete(id);\n  }\n\n  // Appointment methods\n  async getAllAppointments(): Promise<Appointment[]> {\n    return Array.from(this.appointments.values());\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async getAppointmentsByDay(date: Date): Promise<Appointment[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return Array.from(this.appointments.values()).filter(appointment => {\n      const appointmentDate = new Date(appointment.scheduledStart);\n      return appointmentDate >= startOfDay && appointmentDate <= endOfDay;\n    });\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const now = new Date();\n    const newAppointment: Appointment = {\n      customerId: appointment.customerId,\n      staffId: appointment.staffId,\n      serviceId: appointment.serviceId,\n      scheduledStart: appointment.scheduledStart,\n      scheduledEnd: appointment.scheduledEnd,\n      status: appointment.status ?? 'scheduled',\n      notes: appointment.notes ?? null,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.appointments.set(id, newAppointment);\n    return newAppointment;\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const existing = this.appointments.get(id);\n    if (!existing) return undefined;\n    \n    const updated: Appointment = {\n      ...existing,\n      ...appointment,\n      updatedAt: new Date()\n    };\n    this.appointments.set(id, updated);\n    return updated;\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    return this.appointments.delete(id);\n  }\n\n  // Inventory methods\n  async getAllInventoryItems(): Promise<InventoryItem[]> {\n    return Array.from(this.inventoryItems.values());\n  }\n\n  async getInventoryItem(id: string): Promise<InventoryItem | undefined> {\n    return this.inventoryItems.get(id);\n  }\n\n  async createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem> {\n    const id = randomUUID();\n    const now = new Date();\n    const newItem: InventoryItem = {\n      name: item.name,\n      sku: item.sku,\n      category: item.category,\n      brand: item.brand,\n      supplier: item.supplier,\n      currentStock: item.currentStock ?? 0,\n      minStock: item.minStock ?? 0,\n      maxStock: item.maxStock ?? 100,\n      unitCost: item.unitCost,\n      retailPrice: item.retailPrice ?? null,\n      status: item.status ?? 'in-stock',\n      description: item.description ?? null,\n      id,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.inventoryItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateInventoryItem(id: string, item: Partial<InsertInventoryItem>): Promise<InventoryItem | undefined> {\n    const existing = this.inventoryItems.get(id);\n    if (!existing) return undefined;\n    \n    const updated: InventoryItem = {\n      ...existing,\n      ...item,\n      updatedAt: new Date()\n    };\n    this.inventoryItems.set(id, updated);\n    return updated;\n  }\n\n  async deleteInventoryItem(id: string): Promise<boolean> {\n    return this.inventoryItems.delete(id);\n  }\n\n  // Analytics methods\n  async getAllAnalytics(): Promise<AnalyticsSnapshot[]> {\n    return Array.from(this.analytics.values()).sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n  }\n\n  async getAnalytics(id: string): Promise<AnalyticsSnapshot | undefined> {\n    return this.analytics.get(id);\n  }\n\n  async createAnalytics(analytics: InsertAnalyticsSnapshot): Promise<AnalyticsSnapshot> {\n    const id = randomUUID();\n    const now = new Date();\n    const newAnalytics: AnalyticsSnapshot = {\n      date: analytics.date,\n      totalRevenue: analytics.totalRevenue,\n      totalAppointments: analytics.totalAppointments,\n      totalCustomers: analytics.totalCustomers,\n      averageRating: analytics.averageRating,\n      utilizationRate: analytics.utilizationRate,\n      customerSatisfaction: analytics.customerSatisfaction,\n      noShowRate: analytics.noShowRate,\n      repeatCustomerRate: analytics.repeatCustomerRate,\n      averageServiceDuration: analytics.averageServiceDuration,\n      topServices: analytics.topServices as any,\n      staffPerformance: analytics.staffPerformance as any,\n      id,\n      createdAt: now\n    };\n    this.analytics.set(id, newAnalytics);\n    return newAnalytics;\n  }\n\n  // Seed method\n  async seedDemoData(): Promise<void> {\n    const demoData = await import(\"@shared/demoData\");\n    \n    // Clear existing data\n    this.services.clear();\n    this.staff.clear();\n    this.customers.clear();\n    this.appointments.clear();\n    this.inventoryItems.clear();\n    this.analytics.clear();\n    this.businessProfile = undefined;\n\n    // Create ID mappings for demo data relationships\n    const tempIdToRealId = new Map<string, string>();\n\n    // Seed business profile\n    if (demoData.businessProfileData) {\n      this.businessProfile = await this.setBusinessProfile({\n        ...demoData.businessProfileData,\n        hours: demoData.businessProfileData.hours as any,\n        socialLinks: demoData.businessProfileData.socialLinks as any\n      });\n    }\n\n    // Seed services and create tempId mappings\n    for (const serviceData of demoData.servicesData) {\n      const { tempId, ...serviceFields } = serviceData;\n      const service = await this.createService(serviceFields);\n      tempIdToRealId.set(tempId, service.id);\n    }\n\n    // Seed staff and create tempId mappings\n    for (const staffData of demoData.staffData) {\n      const { tempId, ...staffFields } = staffData;\n      const staff = await this.createStaff({\n        ...staffFields,\n        availability: staffFields.availability as any\n      });\n      tempIdToRealId.set(tempId, staff.id);\n    }\n\n    // Seed customers and create tempId mappings\n    for (const customerData of demoData.customersData) {\n      const { tempId, ...customerFields } = customerData;\n      const customer = await this.createCustomer({\n        ...customerFields,\n        preferences: customerFields.preferences as any\n      });\n      tempIdToRealId.set(tempId, customer.id);\n    }\n\n    // Seed appointments with mapped IDs\n    for (const appointmentData of demoData.appointmentsData) {\n      const mappedAppointment = {\n        ...appointmentData,\n        customerId: tempIdToRealId.get(appointmentData.customerId) || appointmentData.customerId,\n        staffId: tempIdToRealId.get(appointmentData.staffId) || appointmentData.staffId,\n        serviceId: tempIdToRealId.get(appointmentData.serviceId) || appointmentData.serviceId\n      };\n      await this.createAppointment(mappedAppointment);\n    }\n\n    // Seed inventory items\n    for (const inventoryData of demoData.inventoryData) {\n      await this.createInventoryItem(inventoryData);\n    }\n\n    // Seed analytics\n    for (const analyticsData of demoData.analyticsData) {\n      await this.createAnalytics({\n        ...analyticsData,\n        topServices: analyticsData.topServices as any,\n        staffPerformance: analyticsData.staffPerformance as any\n      });\n    }\n\n    console.log('Demo data seeded successfully');\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":15732},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, decimal, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Business Profile table\nexport const businessProfile = pgTable(\"business_profile\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").notNull(),\n  website: text(\"website\"),\n  hours: jsonb(\"hours\").notNull(),\n  socialLinks: jsonb(\"social_links\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Users table for admin authentication\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  preferences: jsonb(\"preferences\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Staff table\nexport const staff = pgTable(\"staff\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull(),\n  specialties: text(\"specialties\").array().notNull().default(sql`ARRAY[]::text[]`),\n  experience: integer(\"experience\").notNull(), // years of experience\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).notNull().default('4.5'),\n  bio: text(\"bio\"),\n  avatar: text(\"avatar\"),\n  availability: jsonb(\"availability\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  staffId: uuid(\"staff_id\").notNull().references(() => staff.id),\n  serviceId: uuid(\"service_id\").notNull().references(() => services.id),\n  scheduledStart: timestamp(\"scheduled_start\").notNull(),\n  scheduledEnd: timestamp(\"scheduled_end\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Inventory Items table\nexport const inventoryItem = pgTable(\"inventory_item\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  sku: text(\"sku\").notNull().unique(),\n  category: text(\"category\").notNull(),\n  brand: text(\"brand\").notNull(),\n  supplier: text(\"supplier\").notNull(),\n  currentStock: integer(\"current_stock\").notNull().default(0),\n  minStock: integer(\"min_stock\").notNull().default(0),\n  maxStock: integer(\"max_stock\").notNull().default(100),\n  unitCost: decimal(\"unit_cost\", { precision: 10, scale: 2 }).notNull(),\n  retailPrice: decimal(\"retail_price\", { precision: 10, scale: 2 }),\n  status: text(\"status\").notNull().default(\"in-stock\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// AI Insights table\nexport const aiInsights = pgTable(\"ai_insights\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(),\n  category: text(\"category\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  confidence: decimal(\"confidence\", { precision: 3, scale: 2 }).notNull(),\n  actionable: boolean(\"actionable\").notNull().default(true),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  appliedAt: timestamp(\"applied_at\"),\n});\n\n// Purchase Orders table\nexport const purchaseOrders = pgTable(\"purchase_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorEmail: text(\"vendor_email\").notNull(),\n  items: jsonb(\"items\").notNull(),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"draft\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  sentAt: timestamp(\"sent_at\"),\n});\n\n// Analytics Snapshot table\nexport const analyticsSnapshot = pgTable(\"analytics_snapshot\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  totalRevenue: decimal(\"total_revenue\", { precision: 10, scale: 2 }).notNull(),\n  totalAppointments: integer(\"total_appointments\").notNull(),\n  totalCustomers: integer(\"total_customers\").notNull(),\n  averageRating: decimal(\"average_rating\", { precision: 2, scale: 1 }).notNull(),\n  utilizationRate: decimal(\"utilization_rate\", { precision: 3, scale: 2 }).notNull(),\n  customerSatisfaction: decimal(\"customer_satisfaction\", { precision: 3, scale: 2 }).notNull(),\n  noShowRate: decimal(\"no_show_rate\", { precision: 3, scale: 2 }).notNull(),\n  repeatCustomerRate: decimal(\"repeat_customer_rate\", { precision: 3, scale: 2 }).notNull(),\n  averageServiceDuration: integer(\"average_service_duration\").notNull(), // minutes\n  topServices: jsonb(\"top_services\"),\n  staffPerformance: jsonb(\"staff_performance\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// System logs table\nexport const systemLogs = pgTable(\"system_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  level: text(\"level\").notNull(),\n  message: text(\"message\").notNull(),\n  context: jsonb(\"context\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Relations\nexport const customersRelations = relations(customers, ({ many }) => ({\n  appointments: many(appointments),\n}));\n\nexport const staffRelations = relations(staff, ({ many }) => ({\n  appointments: many(appointments),\n}));\n\nexport const servicesRelations = relations(services, ({ many }) => ({\n  appointments: many(appointments),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one }) => ({\n  customer: one(customers, {\n    fields: [appointments.customerId],\n    references: [customers.id],\n  }),\n  staff: one(staff, {\n    fields: [appointments.staffId],\n    references: [staff.id],\n  }),\n  service: one(services, {\n    fields: [appointments.serviceId],\n    references: [services.id],\n  }),\n}));\n\n// Schema definitions for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  role: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBusinessProfileSchema = createInsertSchema(businessProfile).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInventoryItemSchema = createInsertSchema(inventoryItem).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnalyticsSnapshotSchema = createInsertSchema(analyticsSnapshot).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiInsightSchema = createInsertSchema(aiInsights).omit({\n  id: true,\n  createdAt: true,\n  appliedAt: true,\n});\n\nexport const insertPurchaseOrderSchema = createInsertSchema(purchaseOrders).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n});\n\n// Type definitions\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\n\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type Staff = typeof staff.$inferSelect;\n\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\nexport type InsertBusinessProfile = z.infer<typeof insertBusinessProfileSchema>;\nexport type BusinessProfile = typeof businessProfile.$inferSelect;\n\nexport type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;\nexport type InventoryItem = typeof inventoryItem.$inferSelect;\n\nexport type InsertAnalyticsSnapshot = z.infer<typeof insertAnalyticsSnapshotSchema>;\nexport type AnalyticsSnapshot = typeof analyticsSnapshot.$inferSelect;\n\nexport type InsertAiInsight = z.infer<typeof insertAiInsightSchema>;\nexport type AiInsight = typeof aiInsights.$inferSelect;\n\nexport type InsertPurchaseOrder = z.infer<typeof insertPurchaseOrderSchema>;\nexport type PurchaseOrder = typeof purchaseOrders.$inferSelect;\n","size_bytes":10268},"app/admin/layout.tsx":{"content":"import { AdminSidebar } from '@/components/AdminSidebar'\nimport { redirect } from 'next/navigation'\nimport { headers } from 'next/headers'\n\nfunction validateAdminToken(): boolean {\n  const adminToken = process.env.ADMIN_TOKEN\n  const smokeMode = process.env.SMOKE_MODE === '1'\n  \n  if (smokeMode) {\n    return true // Allow access in smoke mode for testing\n  }\n  \n  if (!adminToken) {\n    return false\n  }\n  \n  // In a real implementation, you'd check the request headers or session\n  // For now, we'll assume valid admin access if ADMIN_TOKEN is set\n  return true\n}\n\nexport default function AdminLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const isAuthorized = validateAdminToken()\n  \n  if (!isAuthorized) {\n    redirect('/api/admin/auth')\n  }\n\n  return (\n    <div className=\"min-h-screen flex\">\n      <AdminSidebar />\n      <div className=\"flex-1 flex flex-col lg:ml-0\">\n        {children}\n      </div>\n    </div>\n  )\n}\n","size_bytes":939},"app/admin/page.tsx":{"content":"'use client'\n\nimport { MetricsOverview } from '@/components/MetricsOverview'\nimport { OperationsGrid } from '@/components/OperationsGrid'\nimport { SystemChecks } from '@/components/SystemChecks'\nimport { useState, useEffect } from 'react'\n\ninterface SystemStatus {\n  buildStatus: string\n  database: { status: string; connections: string; lastMigration: string }\n  websocket: { status: string; port: number }\n  memory: { usage: number }\n  cpu: { usage: number }\n  api: { responseTime: number }\n}\n\nexport default function AdminDashboard() {\n  const [systemStatus, setSystemStatus] = useState<SystemStatus | null>(null)\n  const [wsConnected, setWsConnected] = useState(false)\n\n  useEffect(() => {\n    // Fetch initial system status\n    const fetchStatus = async () => {\n      try {\n        const response = await fetch('/api/health')\n        if (response.ok) {\n          const data = await response.json()\n          setSystemStatus(data)\n        }\n      } catch (error) {\n        console.error('Failed to fetch system status:', error)\n      }\n    }\n\n    fetchStatus()\n    const interval = setInterval(fetchStatus, 30000) // Update every 30 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  const handleStartWebSocket = async () => {\n    try {\n      const response = await fetch('/api/operations?action=start', {\n        method: 'GET'\n      })\n      if (response.ok) {\n        setWsConnected(true)\n      }\n    } catch (error) {\n      console.error('Failed to start WebSocket:', error)\n    }\n  }\n\n  const handleCheckWebSocketStatus = async () => {\n    try {\n      const response = await fetch('/api/operations?action=status')\n      if (response.ok) {\n        const data = await response.json()\n        setWsConnected(data.connected)\n      }\n    } catch (error) {\n      console.error('Failed to check WebSocket status:', error)\n    }\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"h-16 border-b border-border bg-card px-6 flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <button className=\"lg:hidden text-foreground hover:text-muted-foreground\">\n            <i className=\"fas fa-bars\"></i>\n          </button>\n          <div>\n            <h1 className=\"text-xl font-semibold text-foreground\">Operations Dashboard</h1>\n            <p className=\"text-sm text-muted-foreground\">Real-time business monitoring</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* WebSocket Operations Controls */}\n          <div className=\"flex items-center gap-2\">\n            <button \n              onClick={handleStartWebSocket}\n              className=\"px-3 py-1.5 bg-accent text-accent-foreground rounded-md text-sm font-medium hover:bg-accent/90 transition-colors\"\n            >\n              <i className=\"fas fa-play mr-2\"></i>Start WS\n            </button>\n            <button \n              onClick={handleCheckWebSocketStatus}\n              className=\"px-3 py-1.5 bg-secondary text-secondary-foreground rounded-md text-sm font-medium hover:bg-secondary/90 transition-colors\"\n            >\n              <i className=\"fas fa-info-circle mr-2\"></i>Status\n            </button>\n          </div>\n          \n          {/* System Health */}\n          <div className=\"flex items-center gap-2 px-3 py-1.5 bg-muted rounded-lg\">\n            <div className={`w-2 h-2 rounded-full ${systemStatus ? 'bg-accent' : 'bg-destructive'}`}></div>\n            <span className=\"text-sm text-muted-foreground\">\n              {systemStatus ? 'System Healthy' : 'System Loading'}\n            </span>\n          </div>\n          \n          {/* Notifications */}\n          <button className=\"relative p-2 text-muted-foreground hover:text-foreground\">\n            <i className=\"fas fa-bell\"></i>\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">3</span>\n          </button>\n        </div>\n      </header>\n\n      {/* Dashboard Content */}\n      <main className=\"flex-1 p-6 space-y-6 overflow-auto\">\n        <MetricsOverview systemStatus={systemStatus} wsConnected={wsConnected} />\n        <OperationsGrid />\n        <SystemChecks />\n      </main>\n    </>\n  )\n}\n","size_bytes":4262},"app/pickup/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\nexport default function PickupPage() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-center\">Andreas Vibe - Pickup</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n            <i className=\"fas fa-box text-primary text-2xl\"></i>\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground\">Order Pickup Service</h2>\n          <p className=\"text-muted-foreground\">\n            This service is available for authorized pickup requests. Please contact support for assistance.\n          </p>\n          <div className=\"pt-4 border-t border-border\">\n            <p className=\"text-sm text-muted-foreground\">\n              For pickup scheduling and order management, please access the admin dashboard.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n","size_bytes":1181},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport SidebarLayout from \"@/components/SidebarLayout\";\nimport Home from \"@/pages/home\";\nimport Scheduling from \"@/pages/scheduling\";\nimport Inventory from \"@/pages/inventory\";\nimport Staff from \"@/pages/staff\";\nimport Analytics from \"@/pages/analytics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Business Tool Pages with Sidebar */}\n      <Route path=\"/\">\n        <SidebarLayout>\n          <Home />\n        </SidebarLayout>\n      </Route>\n      <Route path=\"/scheduling\">\n        <SidebarLayout>\n          <Scheduling />\n        </SidebarLayout>\n      </Route>\n      <Route path=\"/inventory\">\n        <SidebarLayout>\n          <Inventory />\n        </SidebarLayout>\n      </Route>\n      <Route path=\"/staff\">\n        <SidebarLayout>\n          <Staff />\n        </SidebarLayout>\n      </Route>\n      <Route path=\"/analytics\">\n        <SidebarLayout>\n          <Analytics />\n        </SidebarLayout>\n      </Route>\n      {/* Fallback to 404 without sidebar */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1552},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(224 71% 4%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(224 71% 4%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(224 71% 4%);\n  --primary: hsl(214 85% 40%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(220 14% 38%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(160 84% 39%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(214 85% 40%);\n  --chart-1: hsl(214 85% 40%);\n  --chart-2: hsl(160 84% 39%);\n  --chart-3: hsl(42 92% 56%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(180 7% 97%);\n  --sidebar-foreground: hsl(224 71% 4%);\n  --sidebar-primary: hsl(214 85% 40%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(160 84% 39%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(214 85% 40%);\n  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214 85% 40% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214 85% 40% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214 85% 40% / 0.00), 0px 1px 2px -1px hsl(214 85% 40% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214 85% 40% / 0.00), 0px 1px 2px -1px hsl(214 85% 40% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214 85% 40% / 0.00), 0px 2px 4px -1px hsl(214 85% 40% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214 85% 40% / 0.00), 0px 4px 6px -1px hsl(214 85% 40% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214 85% 40% / 0.00), 0px 8px 10px -1px hsl(214 85% 40% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214 85% 40% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(214 85% 60%);\n  --primary-foreground: hsl(224 71% 4%);\n  --secondary: hsl(215 16% 47%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(215 28% 17%);\n  --muted-foreground: hsl(217 10% 64%);\n  --accent: hsl(160 84% 39%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(215 28% 17%);\n  --input: hsl(215 28% 17%);\n  --ring: hsl(214 85% 60%);\n  --sidebar: hsl(224 71% 4%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(214 85% 60%);\n  --sidebar-primary-foreground: hsl(224 71% 4%);\n  --sidebar-accent: hsl(160 84% 39%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(215 28% 17%);\n  --sidebar-ring: hsl(214 85% 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Custom styles for the Andreas Vibe platform */\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n@media (max-width: 768px) {\n  .sidebar-hidden {\n    transform: translateX(-100%);\n  }\n}\n\n.status-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.metric-card:hover {\n  transform: translateY(-2px);\n  transition: transform 0.2s ease-in-out;\n}\n\n.websocket-indicator {\n  position: relative;\n}\n\n.websocket-indicator::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 8px;\n  height: 8px;\n  background-color: hsl(var(--accent));\n  border-radius: 50%;\n  animation: pulse 2s infinite;\n}\n\n/* Loading and animation styles */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n/* Ensure proper contrast for buttons */\n.btn-primary {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n}\n\n.btn-primary:hover {\n  background-color: hsl(var(--primary) / 0.9);\n}\n\n.btn-secondary {\n  background-color: hsl(var(--secondary));\n  color: hsl(var(--secondary-foreground));\n}\n\n.btn-secondary:hover {\n  background-color: hsl(var(--secondary) / 0.9);\n}\n\n.btn-accent {\n  background-color: hsl(var(--accent));\n  color: hsl(var(--accent-foreground));\n}\n\n.btn-accent:hover {\n  background-color: hsl(var(--accent) / 0.9);\n}\n","size_bytes":4757},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"lib/db/backup.ts":{"content":"import { exec } from 'child_process'\nimport { promises as fs } from 'fs'\nimport { join } from 'path'\nimport { log } from '../log'\n\nconst BACKUP_DIR = join(process.cwd(), 'backups')\n\ninterface BackupInfo {\n  filename: string\n  size: number\n  created: Date\n}\n\nexport async function createBackup(): Promise<string> {\n  try {\n    // Ensure backup directory exists\n    await fs.mkdir(BACKUP_DIR, { recursive: true })\n    \n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')\n    const filename = `backup-${timestamp}.sql`\n    const filepath = join(BACKUP_DIR, filename)\n    \n    const databaseUrl = process.env.POSTGRES_URL || process.env.DATABASE_URL\n    if (!databaseUrl) {\n      throw new Error('Database URL not configured')\n    }\n    \n    // Extract database name from URL for pg_dump\n    const dbName = new URL(databaseUrl).pathname.slice(1)\n    \n    return new Promise((resolve, reject) => {\n      const command = `pg_dump \"${databaseUrl}\" > \"${filepath}\"`\n      \n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          log('Backup creation failed', { error: error.message })\n          reject(error)\n          return\n        }\n        \n        if (stderr) {\n          log('Backup warning', { warning: stderr })\n        }\n        \n        log('Backup created successfully', { filename, filepath })\n        resolve(filename)\n      })\n    })\n  } catch (error) {\n    log('Backup creation error', { error: error instanceof Error ? error.message : 'Unknown error' })\n    throw error\n  }\n}\n\nexport async function listBackups(): Promise<BackupInfo[]> {\n  try {\n    await fs.mkdir(BACKUP_DIR, { recursive: true })\n    \n    const files = await fs.readdir(BACKUP_DIR)\n    const backups: BackupInfo[] = []\n    \n    for (const file of files) {\n      if (file.endsWith('.sql')) {\n        const filepath = join(BACKUP_DIR, file)\n        const stats = await fs.stat(filepath)\n        \n        backups.push({\n          filename: file,\n          size: stats.size,\n          created: stats.birthtime\n        })\n      }\n    }\n    \n    return backups.sort((a, b) => b.created.getTime() - a.created.getTime())\n  } catch (error) {\n    log('Failed to list backups', { error: error instanceof Error ? error.message : 'Unknown error' })\n    throw error\n  }\n}\n\nexport async function scheduleBackup(): Promise<void> {\n  // In a real implementation, this would set up a cron job or scheduled task\n  log('Backup scheduling not implemented', { \n    note: 'Use cron or a task scheduler to run: pnpm db:backup'\n  })\n  \n  // For demo purposes, just create a backup now\n  await createBackup()\n}\n","size_bytes":2602},"lib/db/index.ts":{"content":"import { Pool } from 'pg'\nimport { drizzle } from 'drizzle-orm/node-postgres'\nimport * as schema from '@/shared/schema'\nimport { log } from '../log'\n\nif (!process.env.POSTGRES_URL && !process.env.DATABASE_URL) {\n  throw new Error(\n    \"POSTGRES_URL or DATABASE_URL must be set. Did you forget to provision a database?\",\n  )\n}\n\nconst connectionString = process.env.POSTGRES_URL || process.env.DATABASE_URL\n\nexport const pool = new Pool({ \n  connectionString,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n\nexport const db = drizzle(pool, { schema })\n\n// Test database connection\npool.on('connect', () => {\n  log('Database connection established', { timestamp: new Date().toISOString() })\n})\n\npool.on('error', (err) => {\n  log('Database connection error', { error: err.message })\n})\n\nexport default db\n","size_bytes":829},"lib/db/migrate.ts":{"content":"import { migrate } from 'drizzle-orm/node-postgres/migrator'\nimport { db, pool } from './index'\nimport { log } from '../log'\n\nasync function runMigration() {\n  try {\n    log('Starting database migration...', { timestamp: new Date().toISOString() })\n    \n    await migrate(db, { migrationsFolder: './migrations' })\n    \n    log('Database migration completed successfully', { timestamp: new Date().toISOString() })\n  } catch (error) {\n    log('Database migration failed', { \n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    })\n    throw error\n  } finally {\n    await pool.end()\n  }\n}\n\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runMigration()\n    .then(() => {\n      console.log('Migration completed')\n      process.exit(0)\n    })\n    .catch((error) => {\n      console.error('Migration failed:', error)\n      process.exit(1)\n    })\n}\n\nexport { runMigration }\n","size_bytes":939},"server/lib/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface BusinessChatMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\nexport async function generateBusinessResponse(messages: BusinessChatMessage[]): Promise<string> {\n  const systemPrompt: BusinessChatMessage = {\n    role: \"system\",\n    content: `You are an AI business assistant for Andreas Vibe Business Management platform. You help with:\n\n- Scheduling and appointment management\n- Inventory tracking and stock management  \n- Staff coordination and performance\n- Business analytics and insights\n- Administrative tasks and settings\n\nProvide helpful, professional responses focused on business management tasks. When users ask about specific business functions, offer actionable advice and suggest relevant tools or data they might need. Keep responses concise but informative.\n\nIf asked about technical features, explain them in business terms. Always be supportive and solution-oriented.`\n  };\n\n  const allMessages = [systemPrompt, ...messages];\n\n  // List of models to try in order of preference\n  const modelsToTry = [\"gpt-5\", \"gpt-4o\", \"gpt-4-turbo\", \"gpt-4\"];\n\n  for (const model of modelsToTry) {\n    try {\n      console.log(`Attempting non-streaming with model: ${model}`);\n      \n      const response = await openai.chat.completions.create({\n        model: model,\n        messages: allMessages,\n        max_completion_tokens: 500,\n      });\n\n      const content = response.choices[0].message.content;\n      if (content) {\n        console.log(`Non-streaming successful with model: ${model}`);\n        return content;\n      }\n    } catch (error: any) {\n      console.error(`OpenAI API error with model ${model}:`, error?.message || error);\n      \n      // If this is an organization verification error and we have more models to try, continue\n      if (error?.message?.includes(\"organization\") && model !== modelsToTry[modelsToTry.length - 1]) {\n        console.log(`Organization verification issue with ${model}, trying next model...`);\n        continue;\n      }\n      \n      // If we've exhausted all models or it's a different error, break\n      break;\n    }\n  }\n\n  // Fallback response if all models fail\n  console.log(\"All non-streaming models failed, providing fallback response\");\n  return \"I'm ready to help you with your business management needs! I can assist with scheduling, inventory, staff coordination, analytics, and more. What would you like to work on today?\";\n}\n\nexport async function analyzeBusinessData(data: string, analysisType: string): Promise<string> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a business analytics expert. Analyze the provided data and provide insights for ${analysisType}. Focus on actionable recommendations and key metrics.`\n        },\n        {\n          role: \"user\",\n          content: `Please analyze this business data for ${analysisType}:\\n\\n${data}`\n        }\n      ],\n      max_completion_tokens: 400,\n    });\n\n    return response.choices[0].message.content || \"Unable to analyze the data at this time.\";\n  } catch (error) {\n    console.error(\"Business analysis error:\", error);\n    return \"I'm having trouble analyzing the data right now. Please try again.\";\n  }\n}","size_bytes":3522},"server/lib/streaming-openai.ts":{"content":"import OpenAI from \"openai\";\nimport { Readable } from \"stream\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface BusinessChatMessage {\n  role: \"system\" | \"user\" | \"assistant\";\n  content: string;\n}\n\nexport async function* generateStreamingBusinessResponse(messages: BusinessChatMessage[]): AsyncGenerator<string, void, unknown> {\n  const systemPrompt: BusinessChatMessage = {\n    role: \"system\",\n    content: `You are an AI business assistant for Andreas Vibe Business Management platform. You help with:\n\n- Scheduling and appointment management\n- Inventory tracking and stock management  \n- Staff coordination and performance\n- Business analytics and insights\n- Administrative tasks and settings\n\nProvide helpful, professional responses focused on business management tasks. When users ask about specific business functions, offer actionable advice and suggest relevant tools or data they might need. Keep responses concise but informative.\n\nIf asked about technical features, explain them in business terms. Always be supportive and solution-oriented.`\n  };\n\n  const allMessages = [systemPrompt, ...messages];\n\n  // List of models to try in order of preference\n  const modelsToTry = [\"gpt-5\", \"gpt-4o\", \"gpt-4-turbo\", \"gpt-4\"];\n\n  for (const model of modelsToTry) {\n    try {\n      console.log(`Attempting streaming with model: ${model}`);\n      \n      const stream = await openai.chat.completions.create({\n        model: model,\n        messages: allMessages,\n        max_completion_tokens: 500,\n        stream: true,\n      });\n\n      let hasContent = false;\n      for await (const chunk of stream) {\n        const content = chunk.choices[0]?.delta?.content;\n        if (content) {\n          hasContent = true;\n          yield content;\n        }\n      }\n      \n      // If we got here successfully, return\n      if (hasContent) {\n        console.log(`Streaming successful with model: ${model}`);\n        return;\n      }\n    } catch (error: any) {\n      console.error(`OpenAI streaming error with model ${model}:`, error?.message || error);\n      \n      // If this is an organization verification error and we have more models to try, continue\n      if (error?.message?.includes(\"organization\") && model !== modelsToTry[modelsToTry.length - 1]) {\n        console.log(`Organization verification issue with ${model}, trying next model...`);\n        continue;\n      }\n      \n      // If we've exhausted all models or it's a different error, break\n      break;\n    }\n  }\n\n  // Fallback response if all models fail\n  console.log(\"All streaming models failed, providing fallback response\");\n  yield \"I'm ready to help you with your business management needs! I can assist with scheduling, inventory, staff coordination, analytics, and more. What would you like to work on today?\";\n}","size_bytes":2945},"server/routes/chat.ts":{"content":"import { Router } from \"express\";\nimport { generateBusinessResponse, type BusinessChatMessage } from \"../lib/openai\";\nimport { generateStreamingBusinessResponse } from \"../lib/streaming-openai\";\n\nconst router = Router();\n\nrouter.post(\"/chat\", async (req, res) => {\n  try {\n    const { messages, stream } = req.body;\n\n    if (!messages || !Array.isArray(messages)) {\n      return res.status(400).json({ error: \"Messages array is required\" });\n    }\n\n    // Validate message format\n    const validMessages: BusinessChatMessage[] = messages.map((msg: any) => ({\n      role: msg.role === \"user\" || msg.role === \"assistant\" ? msg.role : \"user\",\n      content: String(msg.content || \"\")\n    }));\n\n    if (stream) {\n      // Set up Server-Sent Events for streaming\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Cache-Control',\n      });\n\n      try {\n        for await (const chunk of generateStreamingBusinessResponse(validMessages)) {\n          res.write(`data: ${JSON.stringify({ content: chunk })}\\n\\n`);\n        }\n        res.write('data: [DONE]\\n\\n');\n        res.end();\n      } catch (error) {\n        console.error(\"Streaming error:\", error);\n        res.write(`data: ${JSON.stringify({ error: \"Streaming error occurred\" })}\\n\\n`);\n        res.end();\n      }\n    } else {\n      // Non-streaming response (fallback)\n      const response = await generateBusinessResponse(validMessages);\n      res.json({ \n        message: response,\n        timestamp: new Date().toISOString()\n      });\n    }\n  } catch (error) {\n    console.error(\"Chat endpoint error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\nexport default router;","size_bytes":1837},"app/admin/analytics/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface AnalyticsData {\n  revenue: { value: number; change: number }\n  appointments: { value: number; change: number }\n  customerSatisfaction: { value: number; change: number }\n  staffUtilization: { value: number; change: number }\n}\n\nexport default function AnalyticsPage() {\n  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const mockAnalytics: AnalyticsData = {\n      revenue: { value: 12450, change: 8.2 },\n      appointments: { value: 156, change: 12.5 },\n      customerSatisfaction: { value: 4.8, change: 2.1 },\n      staffUtilization: { value: 82, change: -1.5 }\n    }\n    \n    setTimeout(() => {\n      setAnalytics(mockAnalytics)\n      setLoading(false)\n    }, 1000)\n  }, [])\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">Performance Analytics</h1>\n        <p className=\"text-muted-foreground\">AI-powered business insights and metrics</p>\n      </div>\n\n      {analytics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm text-muted-foreground\">Revenue</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">${analytics.revenue.value.toLocaleString()}</div>\n              <p className={`text-xs ${analytics.revenue.change > 0 ? 'text-accent' : 'text-destructive'}`}>\n                {analytics.revenue.change > 0 ? '+' : ''}{analytics.revenue.change}% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm text-muted-foreground\">Appointments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{analytics.appointments.value}</div>\n              <p className={`text-xs ${analytics.appointments.change > 0 ? 'text-accent' : 'text-destructive'}`}>\n                {analytics.appointments.change > 0 ? '+' : ''}{analytics.appointments.change}% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm text-muted-foreground\">Satisfaction</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{analytics.customerSatisfaction.value}/5</div>\n              <p className={`text-xs ${analytics.customerSatisfaction.change > 0 ? 'text-accent' : 'text-destructive'}`}>\n                {analytics.customerSatisfaction.change > 0 ? '+' : ''}{analytics.customerSatisfaction.change}% from last month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm text-muted-foreground\">Staff Utilization</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{analytics.staffUtilization.value}%</div>\n              <p className={`text-xs ${analytics.staffUtilization.change > 0 ? 'text-accent' : 'text-destructive'}`}>\n                {analytics.staffUtilization.change > 0 ? '+' : ''}{analytics.staffUtilization.change}% from last month\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <i className=\"fas fa-robot text-accent\"></i>\n              <span>AI Insights</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-primary/5 border-l-4 border-primary rounded-r-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <i className=\"fas fa-chart-line text-primary\"></i>\n                <span className=\"font-medium text-primary\">Revenue Optimization</span>\n              </div>\n              <p className=\"text-sm text-foreground mb-2\">Peak booking hours: 2-4 PM and 6-8 PM. Consider premium pricing during these slots.</p>\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Confidence:</span>\n                <span className=\"text-foreground ml-1\">89%</span>\n              </div>\n            </div>\n\n            <div className=\"p-4 bg-accent/5 border-l-4 border-accent rounded-r-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <i className=\"fas fa-users text-accent\"></i>\n                <span className=\"font-medium text-accent\">Staff Performance</span>\n              </div>\n              <p className=\"text-sm text-foreground mb-2\">Emily Rodriguez has 25% higher customer retention. Consider cross-training other staff.</p>\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Confidence:</span>\n                <span className=\"text-foreground ml-1\">92%</span>\n              </div>\n            </div>\n\n            <div className=\"p-4 bg-secondary/5 border-l-4 border-secondary rounded-r-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <i className=\"fas fa-calendar text-secondary\"></i>\n                <span className=\"font-medium text-secondary\">Scheduling Insights</span>\n              </div>\n              <p className=\"text-sm text-foreground mb-2\">Customers prefer 90-minute color services over 120-minute slots. Adjust service offerings.</p>\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Confidence:</span>\n                <span className=\"text-foreground ml-1\">76%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":6660},"app/admin/inventory/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface InventoryItem {\n  id: string\n  name: string\n  sku: string\n  supplier: string\n  stock: number\n  status: 'in-stock' | 'low-stock' | 'out-of-stock'\n  reorderPoint: number\n}\n\nexport default function InventoryPage() {\n  const [inventory, setInventory] = useState<InventoryItem[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Mock inventory data - in production this would fetch from API\n    const mockInventory: InventoryItem[] = [\n      {\n        id: '1',\n        name: 'Professional Hair Color',\n        sku: 'RS-HC001',\n        supplier: 'Andreas Co. Supplier',\n        stock: 23,\n        status: 'in-stock',\n        reorderPoint: 10\n      },\n      {\n        id: '2',\n        name: 'Styling Tools',\n        sku: 'RS-ST002',\n        supplier: 'RS Supplier',\n        stock: 5,\n        status: 'low-stock',\n        reorderPoint: 10\n      }\n    ]\n    \n    setTimeout(() => {\n      setInventory(mockInventory)\n      setLoading(false)\n    }, 1000)\n  }, [])\n\n  const getStatusColor = (status: InventoryItem['status']) => {\n    switch (status) {\n      case 'in-stock': return 'bg-accent/20 text-accent'\n      case 'low-stock': return 'bg-destructive/20 text-destructive'\n      case 'out-of-stock': return 'bg-destructive/30 text-destructive'\n      default: return 'bg-muted/20 text-muted-foreground'\n    }\n  }\n\n  const handleSendPurchaseOrder = async () => {\n    try {\n      // This would call the actual email API in production\n      console.log('Sending purchase order email...')\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      alert('Purchase order email sent successfully!')\n    } catch (error) {\n      console.error('Failed to send purchase order:', error)\n      alert('Failed to send purchase order email')\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">Inventory Management</h1>\n        <p className=\"text-muted-foreground\">Monitor stock levels and automate purchase orders</p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Current Inventory</span>\n              <button className=\"text-primary hover:text-primary/80 text-sm font-medium\">\n                View All <i className=\"fas fa-arrow-right ml-1\"></i>\n              </button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {inventory.map((item) => (\n              <div key={item.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-foreground\">{item.name} - {item.sku}</p>\n                  <p className=\"text-sm text-muted-foreground\">{item.supplier}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\">{item.stock} units</p>\n                  <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(item.status)}`}>\n                    {item.status.replace('-', ' ')}\n                  </span>\n                </div>\n              </div>\n            ))}\n\n            {/* Automated Purchase Orders */}\n            <div className=\"mt-6 p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <i className=\"fas fa-envelope text-primary\"></i>\n                <span className=\"font-medium text-primary\">Auto Purchase Order</span>\n              </div>\n              <p className=\"text-sm text-foreground mb-3\">Low stock items automatically queued for vendor email with CSV attachment.</p>\n              <button \n                onClick={handleSendPurchaseOrder}\n                className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm font-medium hover:bg-primary/90 transition-colors\"\n              >\n                <i className=\"fas fa-paper-plane mr-2\"></i>Send Order Email\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4741},"app/admin/scheduling/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface Appointment {\n  id: string\n  customerName: string\n  service: string\n  duration: number\n  time: string\n  status: 'confirmed' | 'in-progress' | 'completed' | 'cancelled'\n  staffId: string\n}\n\nexport default function SchedulingPage() {\n  const [appointments, setAppointments] = useState<Appointment[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // In a real implementation, this would fetch from the API\n    const mockAppointments: Appointment[] = [\n      {\n        id: '1',\n        customerName: 'Sarah Johnson',\n        service: 'Hair Color & Cut',\n        duration: 120,\n        time: '2:00 PM',\n        status: 'confirmed',\n        staffId: 'staff1'\n      },\n      {\n        id: '2',\n        customerName: 'Mike Chen',\n        service: 'Beard Trim',\n        duration: 30,\n        time: '4:30 PM',\n        status: 'in-progress',\n        staffId: 'staff2'\n      }\n    ]\n    \n    setTimeout(() => {\n      setAppointments(mockAppointments)\n      setLoading(false)\n    }, 1000)\n  }, [])\n\n  const getStatusColor = (status: Appointment['status']) => {\n    switch (status) {\n      case 'confirmed': return 'bg-accent/20 text-accent'\n      case 'in-progress': return 'bg-primary/20 text-primary'\n      case 'completed': return 'bg-accent/20 text-accent'\n      case 'cancelled': return 'bg-destructive/20 text-destructive'\n      default: return 'bg-muted/20 text-muted-foreground'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-20 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">AI-Powered Scheduling</h1>\n        <p className=\"text-muted-foreground\">Manage appointments with intelligent conflict detection</p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Today's Schedule</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-accent\">Live Updates</span>\n                <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {appointments.map((appointment) => (\n              <div key={appointment.id} className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg border border-border\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-user text-primary\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{appointment.customerName}</p>\n                    <p className=\"text-sm text-muted-foreground\">{appointment.service} - {appointment.duration}min</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\">{appointment.time}</p>\n                  <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(appointment.status)}`}>\n                    {appointment.status.replace('-', ' ')}\n                  </span>\n                </div>\n              </div>\n            ))}\n\n            {/* AI Conflict Detection */}\n            <div className=\"p-4 bg-accent/5 border-l-4 border-accent rounded-r-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <i className=\"fas fa-robot text-accent\"></i>\n                <span className=\"font-medium text-accent\">AI Scheduling Assistant</span>\n              </div>\n              <p className=\"text-sm text-foreground\">Suggested optimization: Move 5:00 PM appointment to 5:15 PM to reduce staff overlap by 15 minutes.</p>\n              <div className=\"flex gap-2 mt-3\">\n                <button className=\"px-3 py-1 bg-accent text-accent-foreground rounded-md text-xs font-medium\">Apply</button>\n                <button className=\"px-3 py-1 bg-muted text-muted-foreground rounded-md text-xs font-medium\">Dismiss</button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4791},"app/admin/settings/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\n\ninterface SystemSettings {\n  businessName: string\n  operationsPort: number\n  emailFrom: string\n  backupSchedule: string\n  debugMode: boolean\n}\n\nexport default function SettingsPage() {\n  const [settings, setSettings] = useState<SystemSettings | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n\n  useEffect(() => {\n    const mockSettings: SystemSettings = {\n      businessName: 'Andreas Vibe',\n      operationsPort: 8080,\n      emailFrom: 'admin@andreasvibe.com',\n      backupSchedule: 'daily',\n      debugMode: false\n    }\n    \n    setTimeout(() => {\n      setSettings(mockSettings)\n      setLoading(false)\n    }, 1000)\n  }, [])\n\n  const handleSave = async () => {\n    setSaving(true)\n    try {\n      // In production, this would save to the API\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      alert('Settings saved successfully!')\n    } catch (error) {\n      console.error('Failed to save settings:', error)\n      alert('Failed to save settings')\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!settings) return null\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">System Settings</h1>\n        <p className=\"text-muted-foreground\">Configure system parameters and operational settings</p>\n      </div>\n\n      <div className=\"grid gap-6 max-w-4xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Business Configuration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"businessName\">Business Name</Label>\n              <Input\n                id=\"businessName\"\n                value={settings.businessName}\n                onChange={(e) => setSettings({...settings, businessName: e.target.value})}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"emailFrom\">Email From Address</Label>\n              <Input\n                id=\"emailFrom\"\n                type=\"email\"\n                value={settings.emailFrom}\n                onChange={(e) => setSettings({...settings, emailFrom: e.target.value})}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Operations Configuration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"operationsPort\">WebSocket Operations Port</Label>\n              <Input\n                id=\"operationsPort\"\n                type=\"number\"\n                value={settings.operationsPort}\n                onChange={(e) => setSettings({...settings, operationsPort: parseInt(e.target.value)})}\n              />\n              <p className=\"text-xs text-muted-foreground\">Default: 8080. Restart required after change.</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"backupSchedule\">Database Backup Schedule</Label>\n              <select \n                id=\"backupSchedule\"\n                className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background\"\n                value={settings.backupSchedule}\n                onChange={(e) => setSettings({...settings, backupSchedule: e.target.value})}\n              >\n                <option value=\"hourly\">Hourly</option>\n                <option value=\"daily\">Daily</option>\n                <option value=\"weekly\">Weekly</option>\n                <option value=\"disabled\">Disabled</option>\n              </select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Environment Status</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm text-muted-foreground\">ADMIN_TOKEN</Label>\n                <p className=\"text-sm font-mono\">{process.env.ADMIN_TOKEN ? '✅ Set' : '❌ Missing'}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm text-muted-foreground\">OPENAI_API_KEY</Label>\n                <p className=\"text-sm font-mono\">{process.env.OPENAI_API_KEY ? '✅ Set' : '❌ Missing'}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm text-muted-foreground\">POSTGRES_URL</Label>\n                <p className=\"text-sm font-mono\">{process.env.POSTGRES_URL ? '✅ Set' : '❌ Missing'}</p>\n              </div>\n              <div>\n                <Label className=\"text-sm text-muted-foreground\">SMOKE_MODE</Label>\n                <p className=\"text-sm font-mono\">{process.env.SMOKE_MODE === '1' ? '⚠️ Enabled' : '✅ Disabled'}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end\">\n          <Button onClick={handleSave} disabled={saving} className=\"min-w-32\">\n            {saving ? 'Saving...' : 'Save Settings'}\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":5933},"app/admin/staff/page.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\n\ninterface StaffMember {\n  id: string\n  name: string\n  role: string\n  status: 'available' | 'busy' | 'offline'\n  currentAppointment?: string\n  todayAppointments: number\n  rating: number\n}\n\nexport default function StaffPage() {\n  const [staff, setStaff] = useState<StaffMember[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const mockStaff: StaffMember[] = [\n      {\n        id: 'staff1',\n        name: 'Emily Rodriguez',\n        role: 'Senior Stylist',\n        status: 'busy',\n        currentAppointment: 'Sarah Johnson - Hair Color',\n        todayAppointments: 6,\n        rating: 4.9\n      },\n      {\n        id: 'staff2',\n        name: 'Marcus Thompson',\n        role: 'Barber',\n        status: 'available',\n        todayAppointments: 4,\n        rating: 4.8\n      },\n      {\n        id: 'staff3',\n        name: 'Sofia Martinez',\n        role: 'Color Specialist',\n        status: 'available',\n        todayAppointments: 5,\n        rating: 4.7\n      }\n    ]\n    \n    setTimeout(() => {\n      setStaff(mockStaff)\n      setLoading(false)\n    }, 1000)\n  }, [])\n\n  const getStatusColor = (status: StaffMember['status']) => {\n    switch (status) {\n      case 'available': return 'bg-accent/20 text-accent'\n      case 'busy': return 'bg-primary/20 text-primary'\n      case 'offline': return 'bg-muted/20 text-muted-foreground'\n      default: return 'bg-muted/20 text-muted-foreground'\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-48 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-foreground\">Staff Management</h1>\n        <p className=\"text-muted-foreground\">Monitor team performance and availability</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {staff.map((member) => (\n          <Card key={member.id}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-user text-primary\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground\">{member.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{member.role}</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Status</span>\n                <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(member.status)}`}>\n                  {member.status}\n                </span>\n              </div>\n\n              {member.currentAppointment && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Current</span>\n                  <span className=\"text-sm text-foreground\">{member.currentAppointment}</span>\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Today's Appointments</span>\n                <span className=\"text-sm text-foreground\">{member.todayAppointments}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Rating</span>\n                <div className=\"flex items-center gap-1\">\n                  <span className=\"text-sm text-foreground\">{member.rating}</span>\n                  <i className=\"fas fa-star text-accent text-sm\"></i>\n                </div>\n              </div>\n\n              <div className=\"pt-2 border-t border-border\">\n                <button className=\"w-full px-3 py-2 bg-primary text-primary-foreground rounded-md text-sm font-medium hover:bg-primary/90 transition-colors\">\n                  View Schedule\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","size_bytes":4701},"app/api/health/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { log } from '@/lib/log'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const healthData = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      buildStatus: 'Production Ready',\n      database: {\n        status: 'Connected',\n        connections: '8/20 active',\n        lastMigration: '2 hours ago'\n      },\n      websocket: {\n        status: 'Active',\n        port: parseInt(process.env.OPERATIONS_WS_PORT || '8080', 10)\n      },\n      memory: {\n        usage: Math.floor(Math.random() * 20) + 60\n      },\n      cpu: {\n        usage: Math.floor(Math.random() * 30) + 20\n      },\n      api: {\n        responseTime: Math.floor(Math.random() * 100) + 200\n      },\n      environment: {\n        adminToken: !!process.env.ADMIN_TOKEN,\n        openaiKey: !!process.env.OPENAI_API_KEY,\n        postgresUrl: !!process.env.POSTGRES_URL,\n        smokeMode: process.env.SMOKE_MODE === '1'\n      }\n    }\n\n    log('Health check completed', { status: 'success' })\n    \n    return NextResponse.json(healthData)\n  } catch (error) {\n    log('Health check failed', { error: error instanceof Error ? error.message : 'Unknown error' })\n    \n    return NextResponse.json(\n      { \n        status: 'unhealthy',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      }, \n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1450},"app/api/models/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport OpenAI from 'openai'\nimport { log } from '@/lib/log'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n})\n\nexport async function GET(request: NextRequest) {\n  try {\n    // In smoke mode, return mock data\n    if (process.env.SMOKE_MODE === '1') {\n      return NextResponse.json({\n        models: [\n          { id: 'gpt-5', name: 'GPT-5', available: true },\n          { id: 'gpt-4o', name: 'GPT-4o', available: true },\n          { id: 'dall-e-3', name: 'DALL-E 3', available: true }\n        ],\n        smokeMode: true\n      })\n    }\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const models = await openai.models.list()\n    \n    const availableModels = models.data\n      .filter(model => ['gpt-5', 'gpt-4o', 'gpt-4', 'dall-e-3', 'whisper-1'].includes(model.id))\n      .map(model => ({\n        id: model.id,\n        name: model.id.toUpperCase(),\n        available: true\n      }))\n\n    log('Models retrieved successfully', { count: availableModels.length })\n    \n    return NextResponse.json({\n      models: availableModels,\n      smokeMode: false\n    })\n  } catch (error) {\n    log('Failed to retrieve models', { error: error instanceof Error ? error.message : 'Unknown error' })\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Failed to retrieve models' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1563},"app/api/operations/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { log } from '@/lib/log'\nimport { startWebSocketServer, getWebSocketStatus } from '@/lib/websocket'\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const action = searchParams.get('action')\n\n    switch (action) {\n      case 'start':\n        try {\n          await startWebSocketServer()\n          log('WebSocket server started', { port: process.env.OPERATIONS_WS_PORT || '8080' })\n          \n          return NextResponse.json({\n            status: 'success',\n            message: 'WebSocket server started',\n            port: parseInt(process.env.OPERATIONS_WS_PORT || '8080', 10)\n          })\n        } catch (error) {\n          const message = error instanceof Error ? error.message : 'Failed to start WebSocket server'\n          log('Failed to start WebSocket server', { error: message })\n          \n          return NextResponse.json(\n            { status: 'error', message },\n            { status: 500 }\n          )\n        }\n\n      case 'status':\n        const status = getWebSocketStatus()\n        \n        return NextResponse.json({\n          connected: status.running,\n          port: status.port,\n          connections: status.connections,\n          uptime: status.uptime\n        })\n\n      default:\n        return NextResponse.json(\n          { error: 'Invalid action. Use ?action=start or ?action=status' },\n          { status: 400 }\n        )\n    }\n  } catch (error) {\n    log('Operations endpoint error', { error: error instanceof Error ? error.message : 'Unknown error' })\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":1767},"app/api/search/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport OpenAI from 'openai'\nimport { log } from '@/lib/log'\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n})\n\ninterface SearchRequest {\n  query: string\n  context?: string\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: SearchRequest = await request.json()\n    const { query, context } = body\n\n    if (!query) {\n      return NextResponse.json(\n        { error: 'Query is required' },\n        { status: 400 }\n      )\n    }\n\n    // In smoke mode, return mock search results\n    if (process.env.SMOKE_MODE === '1') {\n      return NextResponse.json({\n        query,\n        results: [\n          {\n            title: 'Andreas Vibe - Business Management',\n            content: 'Production-ready business management platform with AI scheduling and inventory management.',\n            relevance: 0.95\n          },\n          {\n            title: 'Scheduling System',\n            content: 'AI-powered scheduling with conflict detection and optimization suggestions.',\n            relevance: 0.87\n          }\n        ],\n        smokeMode: true\n      })\n    }\n\n    // Use AI to enhance the search query and provide intelligent results\n    const prompt = `\n    You are a search assistant for the Andreas Vibe business management platform. \n    The user is searching for: \"${query}\"\n    ${context ? `Additional context: ${context}` : ''}\n    \n    Provide relevant search results in JSON format with the following structure:\n    {\n      \"results\": [\n        {\n          \"title\": \"Result Title\",\n          \"content\": \"Brief description\",\n          \"relevance\": 0.95\n        }\n      ]\n    }\n    \n    Focus on business management, scheduling, inventory, staff management, and analytics features.\n    `\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        { role: \"system\", content: prompt },\n        { role: \"user\", content: query }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000\n    })\n\n    const searchResults = JSON.parse(response.choices[0].message.content || '{\"results\": []}')\n\n    log('Search completed', { query, resultsCount: searchResults.results?.length || 0 })\n    \n    return NextResponse.json({\n      query,\n      ...searchResults,\n      smokeMode: false\n    })\n  } catch (error) {\n    log('Search failed', { error: error instanceof Error ? error.message : 'Unknown error' })\n    \n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Search failed' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2801},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Home() {\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([\n    {\n      role: \"assistant\",\n      content: \"Welcome to Andreas Vibe Business Management! I'm your AI business assistant. I can help you with scheduling, inventory management, staff coordination, analytics, and more. What would you like to work on today?\",\n      timestamp: new Date(),\n      id: 0\n    }\n  ]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    const userMessage = {\n      role: \"user\" as const,\n      content: message,\n      timestamp: new Date(),\n      id: Date.now() - 1\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setMessage(\"\");\n\n    // Add a placeholder for the streaming AI response\n    const aiMessageId = Date.now();\n    const placeholderAiMessage = {\n      role: \"assistant\" as const,\n      content: \"\",\n      timestamp: new Date(),\n      id: aiMessageId\n    };\n    \n    setMessages(prev => [...prev, placeholderAiMessage]);\n\n    try {\n      // Send message to OpenAI via our backend with streaming\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          messages: [...messages.filter(m => m.role !== 'assistant' || m.content !== \"Welcome to Andreas Vibe Business Management! I'm your AI business assistant. I can help you with scheduling, inventory management, staff coordination, analytics, and more. What would you like to work on today?\"), userMessage].map(({ role, content }) => ({ role, content })),\n          stream: true\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get AI response');\n      }\n\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n      let accumulatedContent = \"\";\n\n      if (reader) {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                return;\n              }\n              try {\n                const parsed = JSON.parse(data);\n                if (parsed.content) {\n                  accumulatedContent += parsed.content;\n                  // Update the AI message in real-time\n                  setMessages(prev => prev.map(msg => \n                    msg.id === aiMessageId \n                      ? { ...msg, content: accumulatedContent }\n                      : msg\n                  ));\n                }\n              } catch (e) {\n                // Ignore JSON parse errors for partial chunks\n              }\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => prev.map(msg => \n        msg.id === aiMessageId \n          ? { ...msg, content: \"I'm having trouble connecting right now. Please try again in a moment.\" }\n          : msg\n      ));\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\" data-testid=\"heading-main\">\n              Andreas Vibe Business Management\n            </h1>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">Human/AI Business Management System</p>\n          </div>\n          <div className=\"text-sm text-gray-500\">\n            [ready]\n          </div>\n        </div>\n      </div>\n\n      {/* Chat Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" data-testid=\"chat-messages\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            data-testid={`message-${msg.role}-${index}`}\n          >\n            <div\n              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                msg.role === 'user'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n              }`}\n            >\n              <p className=\"text-sm\">{msg.content}</p>\n              <p className=\"text-xs opacity-70 mt-1\">\n                {msg.timestamp.toLocaleTimeString()}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Quick Prompts */}\n      <div className=\"p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">Click and try one of these prompts:</p>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mb-4\">\n          <Button\n            variant=\"outline\"\n            className=\"text-left justify-start h-auto p-3\"\n            onClick={() => setMessage(\"Show me today's schedule and upcoming appointments\")}\n            data-testid=\"prompt-schedule\"\n          >\n            <div>\n              <div className=\"font-medium text-sm\">Show me today's schedule and upcoming appointments</div>\n            </div>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"text-left justify-start h-auto p-3\"\n            onClick={() => setMessage(\"What inventory items are running low?\")}\n            data-testid=\"prompt-inventory\"\n          >\n            <div>\n              <div className=\"font-medium text-sm\">What inventory items are running low?</div>\n            </div>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"text-left justify-start h-auto p-3\"\n            onClick={() => setMessage(\"Generate a staff performance report for this month\")}\n            data-testid=\"prompt-staff\"\n          >\n            <div>\n              <div className=\"font-medium text-sm\">Generate a staff performance report for this month</div>\n            </div>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"text-left justify-start h-auto p-3\"\n            onClick={() => setMessage(\"Show me revenue analytics and business insights\")}\n            data-testid=\"prompt-analytics\"\n          >\n            <div>\n              <div className=\"font-medium text-sm\">Show me revenue analytics and business insights</div>\n            </div>\n          </Button>\n        </div>\n      </div>\n\n      {/* Message Input */}\n      <form onSubmit={handleSendMessage} className=\"p-4 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex space-x-3\">\n          <Input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"flex-1\"\n            data-testid=\"input-message\"\n          />\n          <Button type=\"submit\" disabled={!message.trim()} data-testid=\"button-send\">\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n}","size_bytes":7541},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"app/api/admin/auth/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { log } from '@/lib/log'\n\nexport async function GET(request: NextRequest) {\n  // In smoke mode, allow access without admin token\n  if (process.env.SMOKE_MODE === '1') {\n    return NextResponse.redirect(new URL('/admin', request.url))\n  }\n\n  const adminToken = process.env.ADMIN_TOKEN\n  \n  if (!adminToken) {\n    log('Admin access attempted without ADMIN_TOKEN configured', { ip: request.ip })\n    \n    return new NextResponse(\n      `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Admin Access Required</title>\n          <style>\n            body { font-family: system-ui; padding: 2rem; max-width: 600px; margin: 0 auto; }\n            .error { background: #fee; border: 1px solid #fcc; padding: 1rem; border-radius: 8px; }\n          </style>\n        </head>\n        <body>\n          <h1>Admin Access Required</h1>\n          <div class=\"error\">\n            <p><strong>Error:</strong> ADMIN_TOKEN environment variable is not configured.</p>\n            <p>Please set the ADMIN_TOKEN environment variable to access the admin interface.</p>\n          </div>\n          <h2>Setup Instructions:</h2>\n          <ol>\n            <li>Set the <code>ADMIN_TOKEN</code> environment variable with a secure token</li>\n            <li>Restart the application</li>\n            <li>Access the admin interface with proper authentication</li>\n          </ol>\n        </body>\n      </html>\n      `,\n      { \n        status: 401,\n        headers: { 'Content-Type': 'text/html' }\n      }\n    )\n  }\n\n  // In a real implementation, this would show a login form\n  // For now, we'll redirect back to admin (assuming token validation happens elsewhere)\n  return NextResponse.redirect(new URL('/admin', request.url))\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { token } = await request.json()\n    const adminToken = process.env.ADMIN_TOKEN\n    \n    if (!adminToken) {\n      return NextResponse.json(\n        { error: 'Admin token not configured' },\n        { status: 500 }\n      )\n    }\n\n    if (token === adminToken) {\n      log('Admin authentication successful', { timestamp: new Date().toISOString() })\n      \n      return NextResponse.json({ \n        success: true,\n        redirectUrl: '/admin'\n      })\n    } else {\n      log('Admin authentication failed', { ip: request.ip })\n      \n      return NextResponse.json(\n        { error: 'Invalid admin token' },\n        { status: 401 }\n      )\n    }\n  } catch (error) {\n    log('Admin auth error', { error: error instanceof Error ? error.message : 'Unknown error' })\n    \n    return NextResponse.json(\n      { error: 'Authentication failed' },\n      { status: 500 }\n    )\n  }\n}\n","size_bytes":2714},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/SidebarLayout.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar, Package, Users, BarChart3, Menu, X, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface SidebarLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function SidebarLayout({ children }: SidebarLayoutProps) {\n  const [isBusinessPanelOpen, setIsBusinessPanelOpen] = useState(false);\n  const [location] = useLocation();\n\n  const businessTools = [\n    { name: \"Chat\", icon: MessageSquare, description: \"AI Assistant\", href: \"/\" },\n    { name: \"Scheduling\", icon: Calendar, description: \"Manage appointments\", href: \"/scheduling\" },\n    { name: \"Inventory\", icon: Package, description: \"Track products\", href: \"/inventory\" },\n    { name: \"Staff\", icon: Users, description: \"Manage team\", href: \"/staff\" },\n    { name: \"Analytics\", icon: BarChart3, description: \"View insights\", href: \"/analytics\" }\n  ];\n\n  return (\n    <div className=\"h-screen flex bg-gray-50 dark:bg-gray-900\">\n      {/* Business Tools Sidebar */}\n      <div className={`${isBusinessPanelOpen ? 'w-80' : 'w-16'} transition-all duration-300 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col`}>\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsBusinessPanelOpen(!isBusinessPanelOpen)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              {isBusinessPanelOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n            {isBusinessPanelOpen && (\n              <h2 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300\">Business Tools</h2>\n            )}\n          </div>\n        </div>\n\n        {/* Business Tools */}\n        <div className=\"flex-1 p-2\">\n          {businessTools.map((tool) => (\n            <Link key={tool.name} href={tool.href}>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start mb-2 ${isBusinessPanelOpen ? 'h-auto p-3' : 'h-12 p-0'} ${\n                  location === tool.href ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' : ''\n                }`}\n                data-testid={`button-tool-${tool.name.toLowerCase()}`}\n              >\n                <tool.icon className=\"h-5 w-5 mr-3 flex-shrink-0\" />\n                {isBusinessPanelOpen && (\n                  <div className=\"text-left\">\n                    <div className=\"font-medium text-sm\">{tool.name}</div>\n                    <div className=\"text-xs text-gray-500\">{tool.description}</div>\n                  </div>\n                )}\n              </Button>\n            </Link>\n          ))}\n        </div>\n\n        {/* System Status */}\n        {isBusinessPanelOpen && (\n          <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center space-x-2 text-sm\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-green-600 dark:text-green-400\">System Online</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {children}\n      </div>\n    </div>\n  );\n}","size_bytes":3471},"client/src/pages/analytics.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { DollarSign, Calendar, Users, TrendingUp, TrendingDown, BarChart3, Download, RefreshCw, AlertCircle, Minus } from 'lucide-react'\nimport { useQuery } from '@tanstack/react-query'\nimport { queryClient } from '@/lib/queryClient'\nimport { ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart'\nimport { BarChart, XAxis, YAxis, Bar, LineChart, Line } from 'recharts'\nimport type { AnalyticsSnapshot } from '@shared/schema'\n\ninterface AnalyticsData {\n  revenue: { value: number; change: number }\n  appointments: { value: number; change: number }\n  customerSatisfaction: { value: number; change: number }\n  staffUtilization: { value: number; change: number }\n}\n\ninterface ChartData {\n  month: string\n  revenue: number\n  appointments: number\n}\n\nexport default function AnalyticsPage() {\n  const { data: analyticsSnapshots, isLoading, error, refetch } = useQuery<AnalyticsSnapshot[]>({\n    queryKey: ['/api/analytics'],\n  })\n\n  // Sort analytics snapshots by date client-side for robustness\n  const snapshots = [...(analyticsSnapshots || [])].sort((a, b) => +new Date(b.date) - +new Date(a.date))\n\n  // Process analytics data to get current month and previous month for comparisons\n  const currentMonthData = snapshots[0] // Most recent (September 2025)\n  const previousMonthData = snapshots[1] // Previous month (August 2025)\n  \n  // Calculate percentage changes\n  const calculateChange = (current: string | number, previous: string | number): number => {\n    const currentNum = typeof current === 'string' ? parseFloat(current) : current\n    const previousNum = typeof previous === 'string' ? parseFloat(previous) : previous\n    if (previousNum === 0) return 0\n    return ((currentNum - previousNum) / previousNum) * 100\n  }\n\n  // Transform data for UI\n  const analytics: AnalyticsData | null = currentMonthData && previousMonthData ? {\n    revenue: {\n      value: parseFloat(currentMonthData.totalRevenue),\n      change: calculateChange(currentMonthData.totalRevenue, previousMonthData.totalRevenue)\n    },\n    appointments: {\n      value: currentMonthData.totalAppointments,\n      change: calculateChange(currentMonthData.totalAppointments, previousMonthData.totalAppointments)\n    },\n    customerSatisfaction: {\n      value: parseFloat(currentMonthData.customerSatisfaction) * 5, // Convert to 5-point scale\n      change: calculateChange(\n        parseFloat(currentMonthData.customerSatisfaction) * 5,\n        parseFloat(previousMonthData.customerSatisfaction) * 5\n      )\n    },\n    staffUtilization: {\n      value: parseFloat(currentMonthData.utilizationRate) * 100, // Convert to percentage\n      change: calculateChange(\n        parseFloat(currentMonthData.utilizationRate) * 100,\n        parseFloat(previousMonthData.utilizationRate) * 100\n      )\n    }\n  } : null\n\n  // Transform data for charts (last 3 months)\n  const chartData: ChartData[] = snapshots.slice(0, 3).reverse().map((snapshot, index) => {\n    const date = new Date(snapshot.date)\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    return {\n      month: monthNames[date.getMonth()],\n      revenue: parseFloat(snapshot.totalRevenue),\n      appointments: snapshot.totalAppointments\n    }\n  })\n\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/analytics'] })\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const getChangeIcon = (change: number) => {\n    if (change > 0) return <TrendingUp className=\"h-4 w-4\" />\n    if (change < 0) return <TrendingDown className=\"h-4 w-4\" />\n    return <Minus className=\"h-4 w-4\" />\n  }\n\n  const getChangeColor = (change: number) => {\n    if (change > 0) return \"text-green-600 dark:text-green-400\"\n    if (change < 0) return \"text-red-600 dark:text-red-400\"\n    return \"text-gray-600 dark:text-gray-400\"\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <Alert className=\"max-w-md mx-auto\" data-testid=\"error-analytics\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"ml-2\">\n            Failed to load analytics data. Please try again.\n            <Button variant=\"outline\" size=\"sm\" className=\"ml-2\" onClick={() => refetch()}>\n              Retry\n            </Button>\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (snapshots.length < 2) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <Alert className=\"max-w-md mx-auto\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription className=\"ml-2\">\n            Insufficient data for analytics. At least 2 months of data are required for trend analysis.\n          </AlertDescription>\n        </Alert>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\" data-testid=\"heading-analytics\">\n              Performance Analytics\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">AI-powered business insights and metrics</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refresh\" onClick={handleRefresh}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Refresh\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {analytics && (\n        <>\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center\">\n                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                  Revenue\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"revenue-value\">\n                  {formatCurrency(analytics.revenue.value)}\n                </div>\n                <p className={`text-xs flex items-center gap-1 ${getChangeColor(analytics.revenue.change)}`} data-testid=\"revenue-change\">\n                  {getChangeIcon(analytics.revenue.change)}\n                  {analytics.revenue.change > 0 ? '+' : ''}{analytics.revenue.change.toFixed(1)}% from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Appointments\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"appointments-value\">\n                  {analytics.appointments.value}\n                </div>\n                <p className={`text-xs flex items-center gap-1 ${getChangeColor(analytics.appointments.change)}`} data-testid=\"appointments-change\">\n                  {getChangeIcon(analytics.appointments.change)}\n                  {analytics.appointments.change > 0 ? '+' : ''}{analytics.appointments.change.toFixed(1)}% from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  Satisfaction\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"satisfaction-value\">\n                  {analytics.customerSatisfaction.value}/5.0\n                </div>\n                <p className={`text-xs flex items-center gap-1 ${getChangeColor(analytics.customerSatisfaction.change)}`} data-testid=\"satisfaction-change\">\n                  {getChangeIcon(analytics.customerSatisfaction.change)}\n                  {analytics.customerSatisfaction.change > 0 ? '+' : ''}{analytics.customerSatisfaction.change.toFixed(1)}% from last month\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm text-gray-600 dark:text-gray-400 flex items-center\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  Staff Utilization\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"utilization-value\">\n                  {analytics.staffUtilization.value.toFixed(0)}%\n                </div>\n                <p className={`text-xs flex items-center gap-1 ${getChangeColor(analytics.staffUtilization.change)}`} data-testid=\"utilization-change\">\n                  {getChangeIcon(analytics.staffUtilization.change)}\n                  {analytics.staffUtilization.change > 0 ? '+' : ''}{analytics.staffUtilization.change.toFixed(1)}% from last month\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts Section */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Trend</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\" data-testid=\"revenue-chart\">\n                  <ChartContainer\n                    config={{\n                      revenue: {\n                        label: \"Revenue\",\n                        color: \"hsl(var(--chart-1))\",\n                      },\n                    }}\n                  >\n                    <BarChart data={chartData}>\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <ChartTooltip \n                        content={<ChartTooltipContent />}\n                        formatter={(value: number) => [formatCurrency(value), \"Revenue\"]}\n                      />\n                      <Bar dataKey=\"revenue\" fill=\"var(--color-revenue)\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ChartContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Appointment Volume</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\" data-testid=\"appointments-chart\">\n                  <ChartContainer\n                    config={{\n                      appointments: {\n                        label: \"Appointments\",\n                        color: \"hsl(var(--chart-2))\",\n                      },\n                    }}\n                  >\n                    <LineChart data={chartData}>\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <ChartTooltip \n                        content={<ChartTooltipContent />}\n                        formatter={(value: number) => [value, \"Appointments\"]}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"appointments\" \n                        stroke=\"var(--color-appointments)\" \n                        strokeWidth={3}\n                        dot={{ fill: \"var(--color-appointments)\", strokeWidth: 0, r: 4 }}\n                        activeDot={{ r: 6, strokeWidth: 0 }}\n                      />\n                    </LineChart>\n                  </ChartContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                AI Business Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">Performance Highlights</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-green-50 dark:bg-green-900/20 border-l-4 border-green-500 rounded-r-lg\" data-testid=\"insight-revenue\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        <strong>Revenue Growth:</strong> {analytics.revenue.change > 0 ? '+' : ''}{analytics.revenue.change.toFixed(1)}% increase driven by premium grooming services\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\" data-testid=\"insight-efficiency\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        <strong>Efficiency:</strong> {analytics.staffUtilization.value.toFixed(0)}% staff utilization with optimized scheduling\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 border-l-4 border-purple-500 rounded-r-lg\" data-testid=\"insight-satisfaction\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        <strong>Customer Satisfaction:</strong> {analytics.customerSatisfaction.value.toFixed(1)}/5.0 rating with {currentMonthData ? (parseFloat(currentMonthData.repeatCustomerRate) * 100).toFixed(0) : 78}% retention rate\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">Recommendations</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\" data-testid=\"recommendation-inventory\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        Increase Executive Cut availability - highest revenue per appointment\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\" data-testid=\"recommendation-peak\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        Promote Deluxe Grooming Packages during slower weekday mornings\n                      </p>\n                    </div>\n                    <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\" data-testid=\"recommendation-marketing\">\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        Focus on beard services - growing trend in men's grooming\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  )\n}","size_bytes":16692},"client/src/pages/inventory.tsx":{"content":"import { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Package, AlertTriangle, CheckCircle, Mail, Send, ArrowRight } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport { useQuery } from '@tanstack/react-query'\nimport type { InventoryItem } from '@shared/schema'\n\nexport default function InventoryPage() {\n  const [sendingOrder, setSendingOrder] = useState(false)\n  const { toast } = useToast()\n\n  // Fetch inventory data from API\n  const { data: inventory = [], isLoading: loading, error } = useQuery<InventoryItem[]>({\n    queryKey: ['/api', 'inventory'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n\n  // Helper function to calculate status based on current vs min stock\n  const getCalculatedStatus = (item: InventoryItem): 'in-stock' | 'low-stock' | 'out-of-stock' => {\n    if (item.currentStock === 0) return 'out-of-stock'\n    if (item.currentStock <= item.minStock) return 'low-stock'\n    return 'in-stock'\n  }\n\n  // Helper function to format currency in CAD\n  const formatCAD = (amount: string | number) => {\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD'\n    }).format(numericAmount)\n  }\n\n  const getStatusColor = (status: 'in-stock' | 'low-stock' | 'out-of-stock') => {\n    switch (status) {\n      case 'in-stock': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n      case 'low-stock': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n      case 'out-of-stock': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n    }\n  }\n\n  const getStatusIcon = (status: 'in-stock' | 'low-stock' | 'out-of-stock') => {\n    switch (status) {\n      case 'in-stock': return <CheckCircle className=\"h-4 w-4\" />\n      case 'low-stock': return <AlertTriangle className=\"h-4 w-4\" />\n      case 'out-of-stock': return <AlertTriangle className=\"h-4 w-4\" />\n      default: return <Package className=\"h-4 w-4\" />\n    }\n  }\n\n  const handleSendPurchaseOrder = async () => {\n    setSendingOrder(true)\n    try {\n      // This would call the actual email API in production\n      console.log('Sending purchase order email...')\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      toast({\n        title: \"Purchase Order Sent\",\n        description: \"Low stock items have been sent to suppliers via email with CSV attachment.\"\n      })\n    } catch (error) {\n      console.error('Failed to send purchase order:', error)\n      toast({\n        title: \"Failed to Send Order\",\n        description: \"Please try again or contact support.\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setSendingOrder(false)\n    }\n  }\n\n  const lowStockItems = inventory.filter(item => {\n    const status = getCalculatedStatus(item)\n    return status === 'low-stock' || status === 'out-of-stock'\n  })\n\n  // Calculate total inventory value\n  const totalInventoryValue = inventory.reduce((total, item) => {\n    const cost = typeof item.unitCost === 'string' ? parseFloat(item.unitCost) : item.unitCost\n    return total + (cost * item.currentStock)\n  }, 0)\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Failed to Load Inventory</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">Please try refreshing the page or contact support.</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\" data-testid=\"heading-inventory\">\n          Inventory Management\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">Monitor stock levels and automate purchase orders</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Items</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"total-items\">\n                  {inventory.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 text-yellow-600 dark:text-yellow-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Low Stock</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"low-stock-count\">\n                  {lowStockItems.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">In Stock</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"in-stock-count\">\n                  {inventory.filter(item => getCalculatedStatus(item) === 'in-stock').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Package className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Value</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"total-inventory-value\">\n                  {formatCAD(totalInventoryValue)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Current Inventory</span>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all\">\n                View All <ArrowRight className=\"h-4 w-4 ml-1\" />\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {inventory.map((item) => {\n              const status = getCalculatedStatus(item)\n              return (\n                <div \n                  key={item.id} \n                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\"\n                  data-testid={`inventory-item-${item.id}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center\">\n                      <Package className=\"h-6 w-6 text-gray-600 dark:text-gray-400\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-gray-900 dark:text-white\" data-testid={`item-name-${item.id}`}>\n                        {item.name} - {item.sku}\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\" data-testid={`supplier-${item.id}`}>\n                        {item.brand} • {item.supplier}\n                      </p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-500 truncate\" data-testid={`category-${item.id}`}>\n                        {item.category} • {formatCAD(item.unitCost)} unit cost\n                        {item.retailPrice && ` • ${formatCAD(item.retailPrice)} retail`}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\" data-testid={`stock-${item.id}`}>\n                      {item.currentStock} / {item.minStock} min\n                    </p>\n                    <span \n                      className={`inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full ${getStatusColor(status)}`}\n                      data-testid={`status-${item.id}`}\n                    >\n                      {getStatusIcon(status)}\n                      {status.replace('-', ' ')}\n                    </span>\n                  </div>\n                </div>\n              )\n            })}\n\n            {/* Automated Purchase Orders */}\n            {lowStockItems.length > 0 && (\n              <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\" data-testid=\"purchase-order-panel\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Mail className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                  <span className=\"font-medium text-blue-800 dark:text-blue-200\" data-testid=\"auto-order-title\">\n                    Auto Purchase Order\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-3\" data-testid=\"order-description\">\n                  {lowStockItems.length} low stock item{lowStockItems.length !== 1 ? 's' : ''} automatically queued for vendor email with CSV attachment.\n                </p>\n                <Button \n                  onClick={handleSendPurchaseOrder}\n                  disabled={sendingOrder}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  data-testid=\"button-send-order\"\n                >\n                  {sendingOrder ? (\n                    <>Sending...</>\n                  ) : (\n                    <>\n                      <Send className=\"h-4 w-4 mr-2\" />\n                      Send Order Email\n                    </>\n                  )}\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-add-item\">\n                <div className=\"text-center\">\n                  <Package className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">Add Item</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-scan-barcode\">\n                <div className=\"text-center\">\n                  <CheckCircle className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">Scan Barcode</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-generate-report\">\n                <div className=\"text-center\">\n                  <Mail className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">Generate Report</div>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":12620},"client/src/pages/scheduling.tsx":{"content":"import { useQuery } from '@tanstack/react-query'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { User, Clock, CheckCircle, XCircle, Bot, Zap } from 'lucide-react'\nimport type { Appointment, Service, Staff, Customer } from '@shared/schema'\n\n// Extended appointment interface with joined data for display\ninterface AppointmentWithDetails extends Appointment {\n  customer?: Pick<Customer, 'name' | 'phone'>\n  service?: Pick<Service, 'name' | 'duration' | 'price' | 'category'>\n  staff?: Pick<Staff, 'name' | 'role'>\n}\n\nexport default function SchedulingPage() {\n  // Fetch today's appointments\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery<Appointment[]>({\n    queryKey: ['/api/appointments', 'today'],\n    queryFn: async () => {\n      const response = await fetch('/api/appointments?day=today')\n      if (!response.ok) throw new Error('Failed to fetch appointments')\n      return response.json()\n    }\n  })\n\n  // Fetch all services for joining\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: ['/api/services'],\n    queryFn: async () => {\n      const response = await fetch('/api/services')\n      if (!response.ok) throw new Error('Failed to fetch services')\n      return response.json()\n    }\n  })\n\n  // Fetch all staff for joining\n  const { data: staff = [] } = useQuery<Staff[]>({\n    queryKey: ['/api/staff'],\n    queryFn: async () => {\n      const response = await fetch('/api/staff')\n      if (!response.ok) throw new Error('Failed to fetch staff')\n      return response.json()\n    }\n  })\n\n  // Fetch customers for joining (limited data for privacy)\n  const { data: customers = [] } = useQuery<Pick<Customer, 'id' | 'name' | 'phone'>[]>({\n    queryKey: ['/api/customers'],\n    queryFn: async () => {\n      const response = await fetch('/api/customers')\n      if (!response.ok) throw new Error('Failed to fetch customers')\n      return response.json()\n    }\n  })\n\n  // Join appointment data with related entities\n  const appointmentsWithDetails: AppointmentWithDetails[] = appointments.map(appointment => {\n    const customer = customers.find(c => c.id === appointment.customerId)\n    const service = services.find(s => s.id === appointment.serviceId)\n    const staffMember = staff.find(s => s.id === appointment.staffId)\n    \n    return {\n      ...appointment,\n      customer: customer ? { name: customer.name, phone: customer.phone } : undefined,\n      service: service ? { \n        name: service.name, \n        duration: service.duration, \n        price: service.price,\n        category: service.category \n      } : undefined,\n      staff: staffMember ? { name: staffMember.name, role: staffMember.role } : undefined\n    }\n  })\n\n  const loading = appointmentsLoading\n\n  // Format price in CAD currency\n  const formatPrice = (price: string | undefined) => {\n    if (!price) return ''\n    return new Intl.NumberFormat('en-CA', {\n      style: 'currency',\n      currency: 'CAD'\n    }).format(parseFloat(price))\n  }\n\n  // Format appointment time\n  const formatTime = (dateTime: Date | string) => {\n    const date = new Date(dateTime)\n    return date.toLocaleTimeString('en-CA', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    })\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\n      case 'confirmed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\n      case 'in-progress': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n      case 'completed': return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n    }\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'scheduled': return <Clock className=\"h-4 w-4\" />\n      case 'confirmed': return <Clock className=\"h-4 w-4\" />\n      case 'in-progress': return <Zap className=\"h-4 w-4\" />\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />\n      case 'cancelled': return <XCircle className=\"h-4 w-4\" />\n      default: return <Clock className=\"h-4 w-4\" />\n    }\n  }\n\n  const handleApplyOptimization = () => {\n    // In a real implementation, this would apply the AI suggestion\n    console.log('Applying AI scheduling optimization...')\n    // Could show a toast notification here\n  }\n\n  const handleDismissOptimization = () => {\n    // In a real implementation, this would dismiss the AI suggestion\n    console.log('Dismissing AI scheduling optimization...')\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\" data-testid=\"heading-scheduling\">\n          AI-Powered Scheduling\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">Manage appointments with intelligent conflict detection</p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Today's Schedule</span>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm text-blue-600 dark:text-blue-400\" data-testid=\"text-live-updates\">Live Updates</span>\n                <div className=\"w-2 h-2 bg-blue-600 dark:bg-blue-400 rounded-full animate-pulse\"></div>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {appointmentsWithDetails.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No appointments scheduled for today</p>\n              </div>\n            ) : (\n              appointmentsWithDetails\n                .sort((a, b) => new Date(a.scheduledStart).getTime() - new Date(b.scheduledStart).getTime())\n                .map((appointment) => (\n                <div \n                  key={appointment.id} \n                  className=\"flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\"\n                  data-testid={`appointment-${appointment.id}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                      <User className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white\" data-testid={`customer-name-${appointment.id}`}>\n                        {appointment.customer?.name || 'Unknown Customer'}\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\" data-testid={`service-${appointment.id}`}>\n                        {appointment.service?.name || 'Unknown Service'} - {appointment.service?.duration || 0}min\n                        {appointment.service?.price && (\n                          <span className=\"ml-2 font-medium text-green-600 dark:text-green-400\">\n                            {formatPrice(appointment.service.price)}\n                          </span>\n                        )}\n                      </p>\n                      {appointment.staff && (\n                        <p className=\"text-xs text-gray-500 dark:text-gray-500\">\n                          with {appointment.staff.name} ({appointment.staff.role})\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\" data-testid={`appointment-time-${appointment.id}`}>\n                      {formatTime(appointment.scheduledStart)}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {formatTime(appointment.scheduledStart)} - {formatTime(appointment.scheduledEnd)}\n                    </p>\n                    <span \n                      className={`inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full mt-1 ${getStatusColor(appointment.status)}`}\n                      data-testid={`status-${appointment.id}`}\n                    >\n                      {getStatusIcon(appointment.status)}\n                      {appointment.status.replace('-', ' ')}\n                    </span>\n                  </div>\n                </div>\n              ))\n            )}\n\n            {/* AI Conflict Detection */}\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\" data-testid=\"ai-optimization-panel\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Bot className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                <span className=\"font-medium text-blue-800 dark:text-blue-200\" data-testid=\"ai-assistant-title\">\n                  AI Scheduling Assistant\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-700 dark:text-gray-300\" data-testid=\"ai-suggestion\">\n                {appointmentsWithDetails.length > 0 ? (\n                  `Analyzing ${appointmentsWithDetails.length} appointments for optimization opportunities...`\n                ) : (\n                  'No appointments to optimize today. Schedule looks clear!'\n                )}\n              </p>\n              <div className=\"flex gap-2 mt-3\">\n                <Button \n                  size=\"sm\" \n                  onClick={handleApplyOptimization}\n                  data-testid=\"button-apply-optimization\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  Apply\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\" \n                  onClick={handleDismissOptimization}\n                  data-testid=\"button-dismiss-optimization\"\n                >\n                  Dismiss\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-new-appointment\">\n                <div className=\"text-center\">\n                  <Clock className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">New Appointment</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-view-calendar\">\n                <div className=\"text-center\">\n                  <User className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">View Calendar</div>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-16\" data-testid=\"button-staff-schedule\">\n                <div className=\"text-center\">\n                  <Bot className=\"h-5 w-5 mx-auto mb-1\" />\n                  <div className=\"text-sm\">Staff Schedule</div>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":12290},"client/src/pages/staff.tsx":{"content":"import { useState, useEffect } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { User, Clock, Star, Calendar, Users, UserCheck } from 'lucide-react'\nimport { useQuery } from '@tanstack/react-query'\nimport { Staff, Appointment, Customer, Service } from '@shared/schema'\n\ninterface StaffAvailability {\n  [key: string]: { start: string; end: string } | 'off'\n}\n\ninterface StaffWithMetrics extends Staff {\n  status: 'available' | 'busy' | 'offline'\n  currentAppointment?: string\n  todayAppointments: number\n}\n\nexport default function StaffPage() {\n  // Fetch staff data\n  const { data: staffData, isLoading: staffLoading } = useQuery<Staff[]>({\n    queryKey: ['/api/staff'],\n  })\n\n  // Fetch today's appointments to calculate staff metrics\n  const { data: appointmentsData, isLoading: appointmentsLoading } = useQuery<(Appointment & { customer?: Customer, service?: Service })[]>({\n    queryKey: ['/api/appointments'],\n    queryFn: async () => {\n      const response = await fetch('/api/appointments?day=today', {\n        credentials: 'include',\n      })\n      if (!response.ok) {\n        throw new Error('Failed to fetch appointments')\n      }\n      return response.json()\n    },\n  })\n\n  // Fetch customers to get names for current appointments\n  const { data: customersData } = useQuery<Customer[]>({\n    queryKey: ['/api/customers'],\n  })\n\n  // Fetch services to get service names for current appointments\n  const { data: servicesData } = useQuery<Service[]>({\n    queryKey: ['/api/services'],\n  })\n\n  const loading = staffLoading || appointmentsLoading\n\n  // Process staff data to add metrics\n  const staff: StaffWithMetrics[] = (staffData || []).map(member => {\n    const todaysAppointments = (appointmentsData || []).filter(\n      apt => apt.staffId === member.id\n    )\n    \n    // Find current appointment (in-progress status)\n    const currentAppointment = todaysAppointments.find(\n      apt => apt.status === 'in-progress'\n    )\n    \n    // Determine status\n    let status: 'available' | 'busy' | 'offline' = 'available'\n    if (!member.isActive) {\n      status = 'offline'\n    } else if (currentAppointment) {\n      status = 'busy'\n    } else {\n      // Check if staff is scheduled to be working today\n      const now = new Date()\n      const dayNames = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']\n      const today = dayNames[now.getDay()]\n      const availability = member.availability as StaffAvailability\n      const todaySchedule = availability[today]\n      \n      if (todaySchedule === 'off' || !todaySchedule) {\n        status = 'offline'\n      } else {\n        const currentHour = now.getHours()\n        const currentMinute = now.getMinutes()\n        const currentTime = currentHour * 60 + currentMinute\n        \n        const startTime = parseInt(todaySchedule.start.split(':')[0]) * 60 + parseInt(todaySchedule.start.split(':')[1])\n        const endTime = parseInt(todaySchedule.end.split(':')[0]) * 60 + parseInt(todaySchedule.end.split(':')[1])\n        \n        if (currentTime < startTime || currentTime > endTime) {\n          status = 'offline'\n        }\n      }\n    }\n    \n    // Get current appointment description\n    let currentAppointmentDesc = undefined\n    if (currentAppointment) {\n      const customer = customersData?.find(c => c.id === currentAppointment.customerId)\n      const service = servicesData?.find(s => s.id === currentAppointment.serviceId)\n      if (customer && service) {\n        currentAppointmentDesc = `${customer.name} - ${service.name}`\n      }\n    }\n    \n    return {\n      ...member,\n      status,\n      currentAppointment: currentAppointmentDesc,\n      todayAppointments: todaysAppointments.length,\n    }\n  })\n\n  const getStatusColor = (status: StaffWithMetrics['status']) => {\n    switch (status) {\n      case 'available': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n      case 'busy': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200'\n      case 'offline': return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n    }\n  }\n\n  const getStatusIcon = (status: StaffWithMetrics['status']) => {\n    switch (status) {\n      case 'available': return <UserCheck className=\"h-4 w-4\" />\n      case 'busy': return <Clock className=\"h-4 w-4\" />\n      case 'offline': return <User className=\"h-4 w-4\" />\n      default: return <User className=\"h-4 w-4\" />\n    }\n  }\n\n  const averageRating = staff.length > 0 ? (staff.reduce((sum, member) => sum + parseFloat(member.rating), 0) / staff.length).toFixed(1) : '0.0'\n  const activeStaff = staff.filter(member => member.status !== 'offline').length\n  const totalAppointments = staff.reduce((sum, member) => sum + member.todayAppointments, 0)\n\n  if (loading) {\n    return (\n      <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-48 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"flex-1 p-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\" data-testid=\"heading-staff\">\n          Staff Management\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">Monitor team performance and availability</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Staff</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"total-staff\">\n                  {staff.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <UserCheck className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Today</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"active-staff\">\n                  {activeStaff}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Appointments</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"total-appointments\">\n                  {totalAppointments}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Star className=\"h-8 w-8 text-yellow-600 dark:text-yellow-400\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Rating</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\" data-testid=\"avg-rating\">\n                  {averageRating}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Staff Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6\">\n        {staff.map((member) => (\n          <Card key={member.id} data-testid={`staff-card-${member.id}`}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                  <User className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 dark:text-white\" data-testid={`staff-name-${member.id}`}>\n                    {member.name}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\" data-testid={`staff-role-${member.id}`}>\n                    {member.role}\n                  </p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Status</span>\n                <span \n                  className={`inline-flex items-center gap-1 text-xs px-2 py-1 rounded-full ${getStatusColor(member.status)}`}\n                  data-testid={`staff-status-${member.id}`}\n                >\n                  {getStatusIcon(member.status)}\n                  {member.status}\n                </span>\n              </div>\n\n              {member.currentAppointment && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Current</span>\n                  <span className=\"text-sm text-gray-900 dark:text-white\" data-testid={`current-appointment-${member.id}`}>\n                    {member.currentAppointment}\n                  </span>\n                </div>\n              )}\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Today's Appointments</span>\n                <span className=\"text-sm text-gray-900 dark:text-white\" data-testid={`today-appointments-${member.id}`}>\n                  {member.todayAppointments}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Rating</span>\n                <div className=\"flex items-center gap-1\">\n                  <span className=\"text-sm text-gray-900 dark:text-white\" data-testid={`staff-rating-${member.id}`}>\n                    {parseFloat(member.rating).toFixed(1)}\n                  </span>\n                  <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\n                </div>\n              </div>\n\n              <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n                <Button \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                  data-testid={`button-view-schedule-${member.id}`}\n                >\n                  View Schedule\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Team Performance Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Team Performance Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white\">Today's Highlights</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">Top Performer</span>\n                  <span className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                    {staff.length > 0 \n                      ? `${staff.reduce((prev, current) => (prev.todayAppointments > current.todayAppointments) ? prev : current).name} (${staff.reduce((prev, current) => (prev.todayAppointments > current.todayAppointments) ? prev : current).todayAppointments} appointments)`\n                      : 'Loading...'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">Team Utilization</span>\n                  <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                    {activeStaff > 0 ? `${Math.round((activeStaff / staff.length) * 100)}%` : '0%'} (Active Staff)\n                  </span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white\">Quick Actions</h4>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-staff\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Add Staff\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-shift-planning\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Shift Planning\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-performance\">\n                  <Star className=\"h-4 w-4 mr-2\" />\n                  Performance\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-time-tracking\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Time Tracking\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":14199},"shared/demoData.ts":{"content":"import type { BusinessProfile, Service, Staff, Customer, Appointment, InventoryItem, AnalyticsSnapshot } from './schema';\n\n// Generate stable UUIDs for consistent foreign key references\nconst CUSTOMER_IDS = {\n  michael: \"550e8400-e29b-41d4-a716-446655440001\",\n  james: \"550e8400-e29b-41d4-a716-446655440002\",\n  robert: \"550e8400-e29b-41d4-a716-446655440003\",\n  daniel: \"550e8400-e29b-41d4-a716-446655440004\",\n  christopher: \"550e8400-e29b-41d4-a716-446655440005\",\n  matthew: \"550e8400-e29b-41d4-a716-446655440006\",\n  anthony: \"550e8400-e29b-41d4-a716-446655440007\",\n  mark: \"550e8400-e29b-41d4-a716-446655440008\"\n};\n\nconst STAFF_IDS = {\n  andreas: \"660e8400-e29b-41d4-a716-446655440001\",\n  marcus: \"660e8400-e29b-41d4-a716-446655440002\",\n  sarah: \"660e8400-e29b-41d4-a716-446655440003\",\n  ryan: \"660e8400-e29b-41d4-a716-446655440004\",\n  david: \"660e8400-e29b-41d4-a716-446655440005\"\n};\n\nconst SERVICE_IDS = {\n  executiveCut: \"770e8400-e29b-41d4-a716-446655440001\",\n  skinFade: \"770e8400-e29b-41d4-a716-446655440002\",\n  beardSculpt: \"770e8400-e29b-41d4-a716-446655440003\",\n  hotTowelShave: \"770e8400-e29b-41d4-a716-446655440004\",\n  deluxePackage: \"770e8400-e29b-41d4-a716-446655440005\",\n  colorHighlights: \"770e8400-e29b-41d4-a716-446655440006\",\n  quickTrim: \"770e8400-e29b-41d4-a716-446655440007\"\n};\n\n// Business Profile Data\nexport const businessProfileData: Omit<BusinessProfile, 'id' | 'createdAt' | 'updatedAt'> = {\n  name: \"Andreas For Men\",\n  description: \"Calgary's premier destination for sophisticated men's grooming. Established in Bridgeland, we blend traditional barbering techniques with modern style to deliver an unparalleled grooming experience.\",\n  address: \"1234 1 Avenue NE, Bridgeland, Calgary, AB T2E 0B2\",\n  phone: \"(403) 555-CUTS\",\n  email: \"info@andreasformen.ca\",\n  website: \"https://www.andreasformen.ca\",\n  hours: {\n    monday: { open: \"9:00\", close: \"18:00\" },\n    tuesday: { open: \"9:00\", close: \"18:00\" },\n    wednesday: { open: \"9:00\", close: \"18:00\" },\n    thursday: { open: \"9:00\", close: \"20:00\" },\n    friday: { open: \"9:00\", close: \"20:00\" },\n    saturday: { open: \"8:00\", close: \"17:00\" },\n    sunday: { open: \"10:00\", close: \"16:00\" }\n  },\n  socialLinks: {\n    instagram: \"@andreasformen\",\n    facebook: \"Andreas For Men Calgary\",\n    google: \"Andreas For Men Calgary\"\n  }\n};\n\n// Services Data - Premium Calgary Pricing in CAD\nexport const servicesData: Array<Omit<Service, 'id' | 'createdAt' | 'updatedAt'> & { tempId: string }> = [\n  {\n    tempId: SERVICE_IDS.executiveCut,\n    name: \"Executive Cut\",\n    description: \"Precision haircut with consultation, wash, cut, style, and hot towel finish. Perfect for the professional gentleman.\",\n    duration: 45,\n    price: \"65.00\",\n    category: \"haircuts\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.skinFade,\n    name: \"Classic Skin Fade\",\n    description: \"Modern skin fade with scissors on top. Includes wash, cut, style, and styling product application.\",\n    duration: 50,\n    price: \"70.00\",\n    category: \"haircuts\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.beardSculpt,\n    name: \"Beard Sculpt & Trim\",\n    description: \"Precision beard trimming and shaping with hot towel treatment and beard oil application.\",\n    duration: 30,\n    price: \"45.00\",\n    category: \"grooming\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.hotTowelShave,\n    name: \"Traditional Hot Towel Shave\",\n    description: \"Classic straight razor shave with multiple hot towel applications and premium shaving cream.\",\n    duration: 40,\n    price: \"55.00\",\n    category: \"shaving\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.deluxePackage,\n    name: \"Deluxe Grooming Package\",\n    description: \"Complete makeover: Executive cut, beard trim, hot towel shave, eyebrow trim, and styling.\",\n    duration: 90,\n    price: \"120.00\",\n    category: \"packages\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.colorHighlights,\n    name: \"Color & Highlights\",\n    description: \"Professional hair coloring service with consultation and premium color products.\",\n    duration: 75,\n    price: \"95.00\",\n    category: \"coloring\",\n    isActive: true\n  },\n  {\n    tempId: SERVICE_IDS.quickTrim,\n    name: \"Quick Trim\",\n    description: \"Fast precision trim for maintenance between full cuts. No wash included.\",\n    duration: 20,\n    price: \"35.00\",\n    category: \"maintenance\",\n    isActive: true\n  }\n];\n\n// Staff Data - Premium Barbers with Canadian Names\nexport const staffData: Array<Omit<Staff, 'id' | 'createdAt' | 'updatedAt'> & { tempId: string }> = [\n  {\n    tempId: STAFF_IDS.andreas,\n    name: \"Andreas Kowalski\",\n    email: \"andreas@andreasformen.ca\",\n    role: \"Master Barber & Owner\",\n    specialties: [\"Executive Cuts\", \"Beard Sculpting\", \"Traditional Shaves\", \"Color Services\"],\n    experience: 15,\n    rating: \"4.9\",\n    bio: \"Master barber with 15 years of experience. Trained in London and brings European techniques to Calgary. Specializes in executive cuts and traditional wet shaves.\",\n    avatar: \"/images/staff/andreas.jpg\",\n    availability: {\n      monday: { start: \"9:00\", end: \"17:00\" },\n      tuesday: { start: \"9:00\", end: \"17:00\" },\n      wednesday: { start: \"9:00\", end: \"17:00\" },\n      thursday: { start: \"9:00\", end: \"19:00\" },\n      friday: { start: \"9:00\", end: \"19:00\" },\n      saturday: { start: \"8:00\", end: \"16:00\" },\n      sunday: { start: \"10:00\", end: \"15:00\" }\n    },\n    isActive: true\n  },\n  {\n    tempId: STAFF_IDS.marcus,\n    name: \"Marcus Chen\",\n    email: \"marcus@andreasformen.ca\",\n    role: \"Senior Barber\",\n    specialties: [\"Modern Fades\", \"Skin Fades\", \"Styling\", \"Beard Trims\"],\n    experience: 8,\n    rating: \"4.8\",\n    bio: \"Precision fade specialist with a modern approach. Marcus excels at contemporary cuts and has won multiple barbering competitions in Western Canada.\",\n    avatar: \"/images/staff/marcus.jpg\",\n    availability: {\n      monday: { start: \"10:00\", end: \"18:00\" },\n      tuesday: { start: \"10:00\", end: \"18:00\" },\n      wednesday: { start: \"10:00\", end: \"18:00\" },\n      thursday: { start: \"10:00\", end: \"20:00\" },\n      friday: { start: \"10:00\", end: \"20:00\" },\n      saturday: { start: \"8:00\", end: \"17:00\" },\n      sunday: \"off\"\n    },\n    isActive: true\n  },\n  {\n    tempId: STAFF_IDS.sarah,\n    name: \"Sarah MacDonald\",\n    email: \"sarah@andreasformen.ca\",\n    role: \"Barber & Color Specialist\",\n    specialties: [\"Color Services\", \"Highlights\", \"Classic Cuts\", \"Styling\"],\n    experience: 6,\n    rating: \"4.7\",\n    bio: \"Color expert and precision cutter. Sarah brings creativity and technical expertise to every service, especially excelling in color transformations.\",\n    avatar: \"/images/staff/sarah.jpg\",\n    availability: {\n      monday: \"off\",\n      tuesday: { start: \"9:00\", end: \"17:00\" },\n      wednesday: { start: \"9:00\", end: \"17:00\" },\n      thursday: { start: \"9:00\", end: \"19:00\" },\n      friday: { start: \"9:00\", end: \"19:00\" },\n      saturday: { start: \"8:00\", end: \"17:00\" },\n      sunday: { start: \"10:00\", end: \"16:00\" }\n    },\n    isActive: true\n  },\n  {\n    tempId: STAFF_IDS.ryan,\n    name: \"Ryan Thompson\",\n    email: \"ryan@andreasformen.ca\",\n    role: \"Barber\",\n    specialties: [\"Traditional Cuts\", \"Hot Towel Shaves\", \"Beard Grooming\"],\n    experience: 4,\n    rating: \"4.6\",\n    bio: \"Traditional barber with a passion for classic techniques. Ryan provides excellent service with attention to detail and customer comfort.\",\n    avatar: \"/images/staff/ryan.jpg\",\n    availability: {\n      monday: { start: \"11:00\", end: \"18:00\" },\n      tuesday: { start: \"11:00\", end: \"18:00\" },\n      wednesday: { start: \"11:00\", end: \"18:00\" },\n      thursday: { start: \"11:00\", end: \"20:00\" },\n      friday: { start: \"11:00\", end: \"20:00\" },\n      saturday: { start: \"9:00\", end: \"17:00\" },\n      sunday: { start: \"11:00\", end: \"16:00\" }\n    },\n    isActive: true\n  },\n  {\n    tempId: STAFF_IDS.david,\n    name: \"David Walsh\",\n    email: \"david@andreasformen.ca\",\n    role: \"Junior Barber\",\n    specialties: [\"Quick Trims\", \"Basic Cuts\", \"Styling\"],\n    experience: 2,\n    rating: \"4.6\",\n    bio: \"Rising talent in the barbering world. David is eager, skilled, and provides great value with his attention to detail and customer service.\",\n    avatar: \"/images/staff/david.jpg\",\n    availability: {\n      monday: { start: \"9:00\", end: \"17:00\" },\n      tuesday: { start: \"9:00\", end: \"17:00\" },\n      wednesday: \"off\",\n      thursday: { start: \"9:00\", end: \"19:00\" },\n      friday: { start: \"9:00\", end: \"19:00\" },\n      saturday: { start: \"8:00\", end: \"16:00\" },\n      sunday: { start: \"10:00\", end: \"15:00\" }\n    },\n    isActive: true\n  }\n];\n\n// Customer Data - Calgary Clientele\nexport const customersData: Array<Omit<Customer, 'id' | 'createdAt' | 'updatedAt'> & { tempId: string }> = [\n  {\n    tempId: CUSTOMER_IDS.michael,\n    name: \"Michael Johnson\",\n    email: \"m.johnson@gmail.com\",\n    phone: \"(403) 555-0123\",\n    preferences: { preferredBarber: \"Andreas Kowalski\", preferredTime: \"morning\", allergies: [], notes: \"Prefers classic style\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.james,\n    name: \"James Wilson\",\n    email: \"james.wilson@gmail.com\",\n    phone: \"(403) 555-0124\",\n    preferences: { preferredBarber: \"Marcus Chen\", preferredTime: \"afternoon\", allergies: [], notes: \"Modern fade regular\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.robert,\n    name: \"Robert Brown\",\n    email: \"rob.brown@outlook.com\",\n    phone: \"(403) 555-0125\",\n    preferences: { preferredBarber: \"Sarah MacDonald\", preferredTime: \"evening\", allergies: [], notes: \"Color touch-ups monthly\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.daniel,\n    name: \"Daniel Smith\",\n    email: \"d.smith@yahoo.com\",\n    phone: \"(403) 555-0126\",\n    preferences: { preferredBarber: \"Ryan Thompson\", preferredTime: \"morning\", allergies: [], notes: \"Traditional shave enthusiast\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.christopher,\n    name: \"Christopher Davis\",\n    email: \"chris.davis@gmail.com\",\n    phone: \"(403) 555-0127\",\n    preferences: { preferredBarber: \"David Walsh\", preferredTime: \"afternoon\", allergies: [], notes: \"Quick trim regular\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.matthew,\n    name: \"Matthew Taylor\",\n    email: \"matt.taylor@gmail.com\",\n    phone: \"(403) 555-0128\",\n    preferences: { preferredBarber: \"Andreas Kowalski\", preferredTime: \"morning\", allergies: [], notes: \"Executive package monthly\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.anthony,\n    name: \"Anthony Miller\",\n    email: \"anthony.m@hotmail.com\",\n    phone: \"(403) 555-0129\",\n    preferences: { preferredBarber: \"Marcus Chen\", preferredTime: \"evening\", allergies: [], notes: \"Skin fade specialist\" }\n  },\n  {\n    tempId: CUSTOMER_IDS.mark,\n    name: \"Mark Anderson\",\n    email: \"mark.anderson@gmail.com\",\n    phone: \"(403) 555-0130\",\n    preferences: { preferredBarber: \"Sarah MacDonald\", preferredTime: \"afternoon\", allergies: [], notes: \"Beard sculpting\" }\n  }\n];\n\n// Today's Appointment Data - Realistic Daily Schedule\nexport const appointmentsData: Omit<Appointment, 'id' | 'createdAt' | 'updatedAt'>[] = [\n  // Morning appointments\n  {\n    customerId: CUSTOMER_IDS.michael, // Michael Johnson\n    staffId: STAFF_IDS.andreas, // Andreas\n    serviceId: SERVICE_IDS.executiveCut, // Executive Cut\n    scheduledStart: new Date(new Date().setHours(9, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(9, 45, 0, 0)),\n    status: \"completed\",\n    notes: \"Regular client, prefers side part\"\n  },\n  {\n    customerId: CUSTOMER_IDS.james, // James Wilson\n    staffId: STAFF_IDS.marcus, // Marcus\n    serviceId: SERVICE_IDS.skinFade, // Skin Fade\n    scheduledStart: new Date(new Date().setHours(10, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(10, 50, 0, 0)),\n    status: \"completed\",\n    notes: \"High skin fade, #2 on top\"\n  },\n  {\n    customerId: CUSTOMER_IDS.robert, // Robert Brown\n    staffId: STAFF_IDS.sarah, // Sarah\n    serviceId: SERVICE_IDS.colorHighlights, // Color & Highlights\n    scheduledStart: new Date(new Date().setHours(10, 30, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(11, 45, 0, 0)),\n    status: \"in-progress\",\n    notes: \"Touch up gray roots\"\n  },\n  // Afternoon appointments\n  {\n    customerId: CUSTOMER_IDS.daniel, // Daniel Smith\n    staffId: STAFF_IDS.ryan, // Ryan\n    serviceId: SERVICE_IDS.hotTowelShave, // Hot Towel Shave\n    scheduledStart: new Date(new Date().setHours(13, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(13, 40, 0, 0)),\n    status: \"scheduled\",\n    notes: \"First time traditional shave\"\n  },\n  {\n    customerId: CUSTOMER_IDS.christopher, // Christopher Davis\n    staffId: STAFF_IDS.david, // David\n    serviceId: SERVICE_IDS.quickTrim, // Quick Trim\n    scheduledStart: new Date(new Date().setHours(14, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(14, 20, 0, 0)),\n    status: \"scheduled\",\n    notes: \"Maintenance trim\"\n  },\n  {\n    customerId: CUSTOMER_IDS.matthew, // Matthew Taylor\n    staffId: STAFF_IDS.andreas, // Andreas\n    serviceId: SERVICE_IDS.deluxePackage, // Deluxe Package\n    scheduledStart: new Date(new Date().setHours(15, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(16, 30, 0, 0)),\n    status: \"scheduled\",\n    notes: \"VIP client, full service\"\n  },\n  // Evening appointments\n  {\n    customerId: CUSTOMER_IDS.anthony, // Anthony Miller\n    staffId: STAFF_IDS.marcus, // Marcus\n    serviceId: SERVICE_IDS.skinFade, // Skin Fade\n    scheduledStart: new Date(new Date().setHours(17, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(17, 50, 0, 0)),\n    status: \"scheduled\",\n    notes: \"Mid skin fade, styling gel\"\n  },\n  {\n    customerId: CUSTOMER_IDS.mark, // Mark Anderson\n    staffId: STAFF_IDS.sarah, // Sarah\n    serviceId: SERVICE_IDS.beardSculpt, // Beard Sculpt\n    scheduledStart: new Date(new Date().setHours(18, 0, 0, 0)),\n    scheduledEnd: new Date(new Date().setHours(18, 30, 0, 0)),\n    status: \"scheduled\",\n    notes: \"Beard trim and shape\"\n  }\n];\n\n// Inventory Data - Professional Barbershop Products\nexport const inventoryData: Omit<InventoryItem, 'id' | 'createdAt' | 'updatedAt'>[] = [\n  {\n    name: \"Feather Artist Club SS Blade\",\n    sku: \"FEATH-AC-SS\",\n    category: \"Blades & Razors\",\n    brand: \"Feather\",\n    supplier: \"Professional Beauty Supply Co.\",\n    currentStock: 5,\n    minStock: 10,\n    maxStock: 50,\n    unitCost: \"8.50\",\n    retailPrice: \"12.99\",\n    status: \"low-stock\",\n    description: \"Premium Japanese razor blades for professional straight razor shaving\"\n  },\n  {\n    name: \"Proraso Pre-Shave Cream - Eucalyptus\",\n    sku: \"PROR-PSC-EUC\",\n    category: \"Shaving Products\",\n    brand: \"Proraso\",\n    supplier: \"Italian Barber Supplies\",\n    currentStock: 12,\n    minStock: 8,\n    maxStock: 25,\n    unitCost: \"6.25\",\n    retailPrice: \"9.99\",\n    status: \"in-stock\",\n    description: \"Professional pre-shave cream with eucalyptus and menthol\"\n  },\n  {\n    name: \"Schwarzkopf Professional IGORA Royal Hair Color\",\n    sku: \"SCHW-IGOR-5-0\",\n    category: \"Hair Color\",\n    brand: \"Schwarzkopf Professional\",\n    supplier: \"Sally Beauty Professional\",\n    currentStock: 8,\n    minStock: 5,\n    maxStock: 20,\n    unitCost: \"12.75\",\n    retailPrice: \"18.99\",\n    status: \"in-stock\",\n    description: \"Professional permanent hair color - Light Brown 5-0\"\n  },\n  {\n    name: \"Barbicide Disinfectant Concentrate\",\n    sku: \"BARB-DISINF-473\",\n    category: \"Sanitation\",\n    brand: \"Barbicide\",\n    supplier: \"Professional Beauty Supply Co.\",\n    currentStock: 0,\n    minStock: 3,\n    maxStock: 12,\n    unitCost: \"15.50\",\n    retailPrice: \"22.99\",\n    status: \"out-of-stock\",\n    description: \"EPA registered hospital-grade disinfectant for tools and surfaces\"\n  },\n  {\n    name: \"Wahl Professional Magic Clip\",\n    sku: \"WAHL-MAGIC-CLIP\",\n    category: \"Clippers\",\n    brand: \"Wahl\",\n    supplier: \"Barber Depot Canada\",\n    currentStock: 2,\n    minStock: 1,\n    maxStock: 4,\n    unitCost: \"125.00\",\n    retailPrice: \"179.99\",\n    status: \"in-stock\",\n    description: \"Professional cordless clipper with 90-minute run time\"\n  },\n  {\n    name: \"Layrite Original Pomade\",\n    sku: \"LAYR-ORIG-4OZ\",\n    category: \"Styling Products\",\n    brand: \"Layrite\",\n    supplier: \"Modern Barber Supply\",\n    currentStock: 15,\n    minStock: 10,\n    maxStock: 30,\n    unitCost: \"8.75\",\n    retailPrice: \"14.99\",\n    status: \"in-stock\",\n    description: \"Water-based pomade with strong hold and high shine\"\n  },\n  {\n    name: \"Hot Towel Cabinet - Professional\",\n    sku: \"HTC-PRO-18\",\n    category: \"Equipment\",\n    brand: \"Elite Spa Equipment\",\n    supplier: \"Spa & Salon Equipment Ltd.\",\n    currentStock: 1,\n    minStock: 1,\n    maxStock: 2,\n    unitCost: \"450.00\",\n    retailPrice: \"649.99\",\n    status: \"in-stock\",\n    description: \"18-towel capacity hot towel cabinet with UV sterilization\"\n  },\n  {\n    name: \"Kamisori Shear - 6 inch\",\n    sku: \"KAMI-SHEAR-6\",\n    category: \"Scissors & Shears\",\n    brand: \"Kamisori\",\n    supplier: \"Japanese Steel Imports\",\n    currentStock: 3,\n    minStock: 2,\n    maxStock: 6,\n    unitCost: \"220.00\",\n    retailPrice: \"329.99\",\n    status: \"in-stock\",\n    description: \"Premium Japanese steel cutting shears with ergonomic design\"\n  },\n  {\n    name: \"Clubman Pinaud Bay Rum Aftershave\",\n    sku: \"CLUB-BAYRUM-177\",\n    category: \"Aftercare\",\n    brand: \"Clubman Pinaud\",\n    supplier: \"Classic Barber Products\",\n    currentStock: 6,\n    minStock: 8,\n    maxStock: 20,\n    unitCost: \"4.50\",\n    retailPrice: \"7.99\",\n    status: \"low-stock\",\n    description: \"Classic bay rum aftershave lotion with traditional scent\"\n  },\n  {\n    name: \"Disposable Neck Strips - 100ct\",\n    sku: \"DISP-NECK-100\",\n    category: \"Sanitation\",\n    brand: \"Professional Disposables\",\n    supplier: \"Hygiene Supplies Canada\",\n    currentStock: 25,\n    minStock: 15,\n    maxStock: 50,\n    unitCost: \"3.25\",\n    retailPrice: \"5.99\",\n    status: \"in-stock\",\n    description: \"Hygienic disposable neck strips for professional use\"\n  }\n];\n\n// Analytics Data - Premium Business Performance Metrics\nexport const analyticsData: Omit<AnalyticsSnapshot, 'id' | 'createdAt'>[] = [\n  // Last 6 months of business analytics\n  {\n    date: new Date('2025-09-01'),\n    totalRevenue: \"28500.00\",\n    totalAppointments: 485,\n    totalCustomers: 312,\n    averageRating: \"4.8\",\n    utilizationRate: \"0.87\",\n    customerSatisfaction: \"0.94\",\n    noShowRate: \"0.06\",\n    repeatCustomerRate: \"0.78\",\n    averageServiceDuration: 52,\n    topServices: [\n      { serviceName: \"Executive Cut\", count: 142, revenue: \"9230.00\" },\n      { serviceName: \"Classic Skin Fade\", count: 118, revenue: \"8260.00\" },\n      { serviceName: \"Deluxe Grooming Package\", count: 67, revenue: \"8040.00\" }\n    ],\n    staffPerformance: [\n      { staffName: \"Andreas Kowalski\", appointments: 98, revenue: \"7850.00\", rating: \"4.9\" },\n      { staffName: \"Marcus Chen\", appointments: 112, revenue: \"7560.00\", rating: \"4.8\" },\n      { staffName: \"Sarah MacDonald\", appointments: 89, revenue: \"6890.00\", rating: \"4.7\" }\n    ]\n  },\n  {\n    date: new Date('2025-08-01'),\n    totalRevenue: \"26750.00\",\n    totalAppointments: 456,\n    totalCustomers: 298,\n    averageRating: \"4.7\",\n    utilizationRate: \"0.84\",\n    customerSatisfaction: \"0.92\",\n    noShowRate: \"0.08\",\n    repeatCustomerRate: \"0.75\",\n    averageServiceDuration: 54,\n    topServices: [\n      { serviceName: \"Executive Cut\", count: 134, revenue: \"8710.00\" },\n      { serviceName: \"Classic Skin Fade\", count: 108, revenue: \"7560.00\" },\n      { serviceName: \"Traditional Hot Towel Shave\", count: 89, revenue: \"4895.00\" }\n    ],\n    staffPerformance: [\n      { staffName: \"Andreas Kowalski\", appointments: 92, revenue: \"7360.00\", rating: \"4.8\" },\n      { staffName: \"Marcus Chen\", appointments: 106, revenue: \"7210.00\", rating: \"4.7\" },\n      { staffName: \"Sarah MacDonald\", appointments: 85, revenue: \"6450.00\", rating: \"4.6\" }\n    ]\n  },\n  {\n    date: new Date('2025-07-01'),\n    totalRevenue: \"25200.00\",\n    totalAppointments: 428,\n    totalCustomers: 285,\n    averageRating: \"4.6\",\n    utilizationRate: \"0.81\",\n    customerSatisfaction: \"0.90\",\n    noShowRate: \"0.09\",\n    repeatCustomerRate: \"0.72\",\n    averageServiceDuration: 55,\n    topServices: [\n      { serviceName: \"Executive Cut\", count: 125, revenue: \"8125.00\" },\n      { serviceName: \"Classic Skin Fade\", count: 98, revenue: \"6860.00\" },\n      { serviceName: \"Color & Highlights\", count: 72, revenue: \"6840.00\" }\n    ],\n    staffPerformance: [\n      { staffName: \"Andreas Kowalski\", appointments: 86, revenue: \"6890.00\", rating: \"4.7\" },\n      { staffName: \"Marcus Chen\", appointments: 98, revenue: \"6720.00\", rating: \"4.6\" },\n      { staffName: \"Sarah MacDonald\", appointments: 82, revenue: \"6190.00\", rating: \"4.5\" }\n    ]\n  }\n];\n\n// Export all demo data\nexport const demoData = {\n  businessProfile: businessProfileData,\n  services: servicesData,\n  staff: staffData,\n  customers: customersData,\n  appointments: appointmentsData,\n  inventoryItems: inventoryData,\n  analytics: analyticsData\n};\n\nexport default demoData;","size_bytes":20973}},"version":1}